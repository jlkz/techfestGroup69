import { createElement, createContext as reactCreateContext, useContext, useRef } from 'react';
import { useStoreWithEqualityFn } from 'zustand/traditional';
/**
 * create context for individual App
 * mostly use for component
 */
export var createContext = function createContext() {
  var ZustandContext = /*#__PURE__*/reactCreateContext(undefined);
  var Provider = function Provider(_ref) {
    var createStore = _ref.createStore,
      children = _ref.children;
    var storeRef = useRef();
    if (!storeRef.current) {
      storeRef.current = createStore();
    }
    return /*#__PURE__*/createElement(ZustandContext.Provider, {
      value: storeRef.current
    }, children);
  };
  var useContextStore = function useContextStore(selector, equalityFn) {
    var store = useContext(ZustandContext);
    if (!store) {
      throw new Error('Seems like you have not used zustand provider as an ancestor.');
    }
    return useStoreWithEqualityFn(store, selector, equalityFn);
  };
  var useStoreApi = function useStoreApi() {
    var store = useContext(ZustandContext);
    if (!store) {
      throw new Error('Seems like you have not used zustand provider as an ancestor.');
    }
    return store;
  };
  return {
    Provider: Provider,
    useStore: useContextStore,
    useStoreApi: useStoreApi
  };
};