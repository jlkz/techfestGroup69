import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { memo, useEffect, useState } from 'react';
import { useInView } from 'react-intersection-observer';
import { useStore } from "../../store";
import { chatSelectors } from "../../store/selectors";
import { useAtBottom } from "./useAtBottom";
import { jsx as _jsx } from "react/jsx-runtime";
var ChatScrollAnchor = /*#__PURE__*/memo(function () {
  var trackVisibility = useStore(function (s) {
    return !!s.chatLoadingId;
  });
  var str = useStore(chatSelectors.currentChats);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isWindowAvailable = _useState2[0],
    setIsWindowAvailable = _useState2[1];
  useEffect(function () {
    // 检查window对象是否已经可用
    if (typeof window !== 'undefined') {
      setIsWindowAvailable(true);
    }
  }, []);
  var _useInView = useInView({
      delay: 100,
      rootMargin: '0px 0px -150px 0px',
      trackVisibility: trackVisibility
    }),
    ref = _useInView.ref,
    entry = _useInView.entry,
    inView = _useInView.inView;
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    scrollOffset = _useState4[0],
    setScrollOffset = _useState4[1];
  useEffect(function () {
    if (isWindowAvailable) {
      // 如果是移动端，可能200太多了，认为超过 1/3 即可，PC默认200
      setScrollOffset(window.innerHeight / 3 > 200 ? 200 : window.innerHeight / 4);
    }
  }, [isWindowAvailable]);
  var isAtBottom = useAtBottom(scrollOffset);
  useEffect(function () {
    if (isAtBottom && trackVisibility && !inView) {
      entry === null || entry === void 0 || entry.target.scrollIntoView({
        block: 'start'
      });
    }
  }, [inView, entry, isAtBottom, trackVisibility, str]);
  return /*#__PURE__*/_jsx("div", {
    ref: ref,
    style: {
      height: 1,
      width: '100%'
    }
  });
});
export default ChatScrollAnchor;