import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
import { SendOutlined } from '@ant-design/icons';
import { Button, ConfigProvider } from 'antd';
import { createStyles, cx, useResponsive } from 'antd-style';
import { useContext, useRef, useState } from 'react';
import { Flexbox } from 'react-layout-kit';
import { useStore } from "../../store";
import { useMergedState } from 'rc-util';
import ActionBar from "./ActionBar";
import { AutoCompleteTextArea } from "./AutoCompleteTextArea";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var useStyles = createStyles(function (_ref) {
  var css = _ref.css,
    responsive = _ref.responsive,
    token = _ref.token;
  return {
    container: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    position: sticky;\n    z-index: ", ";\n    bottom: 0;\n\n    padding-top: 12px;\n    padding-bottom: 24px;\n\n    background-image: linear-gradient(to top, ", " 88%, transparent 100%);\n\n    ", " {\n      width: 100%;\n    }\n  "])), token.zIndexPopupBase, token.colorBgLayout, responsive.mobile),
    boxShadow: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    position: relative;\n    border-radius: 8px;\n    box-shadow: ", ";\n  "])), token.boxShadowSecondary),
    input: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    width: 100%;\n    border: none;\n    outline: none;\n    border-radius: 8px;\n  "]))),
    btn: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    position: absolute;\n    z-index: 10;\n    right: 8px;\n    bottom: 6px;\n\n    color: ", ";\n    &:hover {\n      color: ", ";\n    }\n  "])), token.colorTextTertiary, token.colorTextSecondary),
    extra: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n    color: ", ";\n  "])), token.colorTextTertiary)
  };
});
export var ChatInputArea = function ChatInputArea(props) {
  var _ref2 = props || {},
    className = _ref2.className,
    onSend = _ref2.onSend,
    renderInputArea = _ref2.renderInputArea;
  var _useStore = useStore(function (s) {
      return [s.sendMessage, !!s.chatLoadingId, s.placeholder, s.inputAreaProps, s.clearMessage];
    }),
    _useStore2 = _slicedToArray(_useStore, 5),
    sendMessage = _useStore2[0],
    isLoading = _useStore2[1],
    placeholder = _useStore2[2],
    inputAreaProps = _useStore2[3],
    clearMessage = _useStore2[4];
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    message = _useState2[0],
    setMessage = _useState2[1];
  var isChineseInput = useRef(false);
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    theme = _useStyles.theme;
  var _useResponsive = useResponsive(),
    mobile = _useResponsive.mobile;
  var _useMergedState = useMergedState(isLoading),
    _useMergedState2 = _slicedToArray(_useMergedState, 2),
    ButtonLoading = _useMergedState2[0],
    setButtonLoading = _useMergedState2[1];
  var send = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var success;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!onSend) {
              _context.next = 9;
              break;
            }
            setButtonLoading(true);
            _context.next = 4;
            return onSend(message);
          case 4:
            success = _context.sent;
            setButtonLoading(false);
            if (success) {
              sendMessage(message);
              setMessage('');
            }
            _context.next = 11;
            break;
          case 9:
            sendMessage(message);
            setMessage('');
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function send() {
      return _ref3.apply(this, arguments);
    };
  }();
  var prefixClass = getPrefixCls('pro-chat-input-area');
  var defaultInputArea = /*#__PURE__*/_jsx(ConfigProvider, {
    theme: {
      token: {
        borderRadius: 4,
        colorBgContainer: theme.colorBgElevated,
        controlHeightLG: 48,
        colorBorder: 'transparent',
        colorPrimaryHover: 'transparent'
      }
    },
    children: /*#__PURE__*/_jsxs(Flexbox, {
      gap: 8,
      padding: 16,
      className: cx(styles.container, "".concat(prefixClass), className),
      children: [/*#__PURE__*/_jsx(ActionBar, {
        className: "".concat(prefixClass, "-action-bar")
      }), /*#__PURE__*/_jsxs(Flexbox, {
        horizontal: true,
        gap: 8,
        align: 'center',
        className: cx(styles.boxShadow, "".concat(prefixClass, "-text-container")),
        children: [/*#__PURE__*/_jsx(AutoCompleteTextArea, _objectSpread(_objectSpread({
          placeholder: placeholder || '请输入内容...'
        }, inputAreaProps), {}, {
          className: cx(styles.input, inputAreaProps === null || inputAreaProps === void 0 ? void 0 : inputAreaProps.className, "".concat(prefixClass, "-component")),
          value: message,
          onChange: function onChange(e) {
            setMessage(e.target.value);
          },
          autoSize: {
            maxRows: 8
          },
          onCompositionStart: function onCompositionStart() {
            isChineseInput.current = true;
          },
          onCompositionEnd: function onCompositionEnd() {
            isChineseInput.current = false;
          },
          onPressEnter: function onPressEnter(e) {
            if (!isLoading && !e.shiftKey && !isChineseInput.current) {
              e.preventDefault();
              send();
            }
          }
        })), mobile ? null : /*#__PURE__*/_jsx(Button, {
          loading: ButtonLoading,
          type: "text",
          className: styles.btn,
          onClick: function onClick() {
            return send();
          },
          icon: /*#__PURE__*/_jsx(SendOutlined, {})
        })]
      })]
    })
  });
  if (renderInputArea) {
    return renderInputArea(defaultInputArea, function (message) {
      sendMessage(message);
    }, clearMessage);
  }
  return defaultInputArea;
};
export default ChatInputArea;