/// <reference types="react" />
import type { Position } from 'react-rnd';
import type { Awareness } from 'y-protocols/awareness';
import type { WebrtcProvider } from 'y-webrtc';
import type { StoreApi } from 'zustand';
export interface User {
    id: string;
    name: string;
    color: string;
}
export interface AwarenessState {
    user: User;
    cursor: Position;
    active: boolean;
}
interface ProviderStore {
    provider: WebrtcProvider;
    awareness?: Awareness;
    currentUser: User;
    awarenessStates: AwarenessState[];
    followUser?: string;
    setFollowUser: (id: string) => void;
}
export declare const createStore: (provider: WebrtcProvider, user: Pick<User, 'color' | 'name'>) => import("zustand/traditional").UseBoundStoreWithEqualityFn<StoreApi<ProviderStore>>;
export declare const useStore: import("zustand-utils").UseContextStore<StoreApi<ProviderStore>>, Provider: ({ createStore, children }: {
    createStore: () => StoreApi<ProviderStore>;
    children: import("react").ReactNode;
}) => import("react").FunctionComponentElement<import("react").ProviderProps<StoreApi<ProviderStore>>>, useStoreApi: () => {
    setState: (partial: ProviderStore | Partial<ProviderStore> | ((state: ProviderStore) => ProviderStore | Partial<ProviderStore>), replace?: boolean) => void;
    getState: () => ProviderStore;
    getInitialState: () => ProviderStore;
    subscribe: (listener: (state: ProviderStore, prevState: ProviderStore) => void) => () => void;
    destroy: () => void;
};
export {};
