import isEqual from 'fast-deep-equal';
import { memo } from 'react';
import Cursor from "./Cursor";
import { useStore } from "../store";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var Cursors = /*#__PURE__*/memo(function () {
  var awarenessStates = useStore(function (s) {
    var _s$awarenessStates;
    return (_s$awarenessStates = s.awarenessStates) === null || _s$awarenessStates === void 0 ? void 0 : _s$awarenessStates.filter(function (a) {
      return a.active && a.user.id !== s.currentUser.id;
    });
  }, isEqual);
  return /*#__PURE__*/_jsx(_Fragment, {
    children: awarenessStates === null || awarenessStates === void 0 ? void 0 : awarenessStates.map(function (a) {
      var cursor = a.cursor,
        user = a.user;
      return /*#__PURE__*/_jsx(Cursor, {
        position: cursor,
        color: user.color,
        name: user.name
      }, user.id);
    })
  });
});
export default Cursors;