import { useEffect } from 'react';
import { distinctUntilChanged, fromEvent, merge, startWith } from 'rxjs';
import { map } from 'rxjs/operators';
// 鼠标移动事件
var mouse$ = fromEvent(document, 'mousemove').pipe(distinctUntilChanged(), map(function (e) {
  return {
    x: e.clientX,
    y: e.clientY
  };
}), startWith({
  x: -100,
  y: -100
}));
var visibility$ = merge(fromEvent(document, 'visibilitychange').pipe(map(function () {
  return document.visibilityState;
})), fromEvent(window, 'focus').pipe(map(function () {
  return document.visibilityState;
})), fromEvent(window, 'blur').pipe(map(function () {
  return 'hidden';
})));
export var useAwarenessEvent = function useAwarenessEvent(_ref) {
  var onMouseMove = _ref.onMouseMove,
    onBlur = _ref.onBlur;
  useEffect(function () {
    var x = mouse$.subscribe(onMouseMove);
    var y = visibility$.subscribe(onBlur);
    return function () {
      x.unsubscribe();
      y.unsubscribe();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
};