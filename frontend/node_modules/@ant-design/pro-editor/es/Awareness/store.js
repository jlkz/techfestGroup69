import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
// FIXME：这里理论上不应该使用 faker 的，后续需要重构优化掉
import isEqual from 'fast-deep-equal';
import { nanoid } from 'nanoid';
import { useEffect } from 'react';
import { createContext } from 'zustand-utils';
import { createWithEqualityFn } from 'zustand/traditional';
import { useAwarenessEvent } from "./event";
export var createStore = function createStore(provider, user) {
  var useStore = createWithEqualityFn(function (set) {
    return {
      provider: provider,
      awareness: provider.awareness,
      currentUser: _objectSpread({
        id: nanoid()
      }, user),
      awarenessStates: [],
      setFollowUser: function setFollowUser(followUser) {
        set({
          followUser: followUser
        });
      }
    };
  }, isEqual);
  var _useStore$getState = useStore.getState(),
    awareness = _useStore$getState.awareness;

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useAwarenessEvent({
    onMouseMove: function onMouseMove(p) {
      awareness.setLocalStateField('cursor', p);
    },
    onBlur: function onBlur(e) {
      awareness.setLocalStateField('active', e === 'visible');
    }
  });

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useEffect(function () {
    // 先创建一下监听事件
    awareness.on('change', function () {
      var awarenessStates = Array.from(awareness.getStates().values());
      useStore.setState(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          awarenessStates: awarenessStates
        });
      });
    });

    // 再初始化一轮用户
    awareness.setLocalStateField('user', useStore.getState().currentUser);
    awareness.setLocalStateField('active', true);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return useStore;
};
var _createContext = createContext(),
  useStore = _createContext.useStore,
  Provider = _createContext.Provider,
  useStoreApi = _createContext.useStoreApi;
export { useStore, Provider, useStoreApi };