import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["placement", "title", "icon", "cursor", "onClick", "className", "arrow", "size", "tooltipDelay"];
import { Button, Tooltip } from 'antd';
import { ConfigProvider } from "../ConfigProvider";
import { useStyles } from "./style";

/**
 * @title 动作图标属性
 * @description 继承自 `Button` 组件所有属性，除了 `title` 和 `size`
 */
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var BaseActionIcon = function BaseActionIcon(_ref) {
  var placement = _ref.placement,
    title = _ref.title,
    icon = _ref.icon,
    cursor = _ref.cursor,
    onClick = _ref.onClick,
    className = _ref.className,
    _ref$arrow = _ref.arrow,
    arrow = _ref$arrow === void 0 ? false : _ref$arrow,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'default' : _ref$size,
    _ref$tooltipDelay = _ref.tooltipDelay,
    tooltipDelay = _ref$tooltipDelay === void 0 ? 0.5 : _ref$tooltipDelay,
    restProps = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles({
      size: size
    }),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var Icon = /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({
    icon: icon,
    className: cx(styles.container, className),
    type: 'text',
    style: {
      cursor: cursor
    },
    size: typeof size === 'number' || size === 'default' ? 'middle' : size
  }, restProps), {}, {
    onClick: onClick
  }));
  return /*#__PURE__*/_jsx(_Fragment, {
    children: !title ? Icon : /*#__PURE__*/_jsx(Tooltip, {
      arrow: arrow,
      overlayClassName: styles.tooltip,
      title: title,
      mouseEnterDelay: tooltipDelay,
      placement: placement,
      children: Icon
    })
  });
};
var ActionIcon = function ActionIcon(props) {
  var _ref2 = props || {},
    size = _ref2.size;
  var _useStyles2 = useStyles({
      size: size
    }),
    token = _useStyles2.theme;
  return /*#__PURE__*/_jsx(ConfigProvider, {
    componentToken: {
      Button: {
        colorText: token.colorTextTertiary,
        // TODO： Token 的提供不太合理，需要改造
        colorBgTextHover: token.colorFillSecondary,
        colorBgTextActive: token.colorFill
      }
    },
    children: /*#__PURE__*/_jsx(BaseActionIcon, _objectSpread({}, props))
  });
};
export default ActionIcon;