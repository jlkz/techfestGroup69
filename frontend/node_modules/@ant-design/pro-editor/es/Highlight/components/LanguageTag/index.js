import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
var _templateObject, _templateObject2, _templateObject3;
import { Tag } from 'antd';
import Color from 'color';
import { createStyles } from "../../../theme";
import { getThemeColor } from "../../theme/colors";
import { jsx as _jsx } from "react/jsx-runtime";
var useStyles = createStyles(function (_ref, _ref2) {
  var cx = _ref.cx,
    css = _ref.css,
    token = _ref.token,
    prefixCls = _ref.prefixCls;
  var theme = _ref2.theme;
  var prefix = "".concat(prefixCls, "-").concat(token.editorPrefix, "-highlight");
  var _getThemeColor = getThemeColor(theme === 'dark'),
    colorFillTertiary = _getThemeColor.colorFillTertiary,
    colorText = _getThemeColor.colorText,
    colorTextSecondary = _getThemeColor.colorTextSecondary;
  var background = Color(colorFillTertiary).mix(Color(theme === 'dark' ? 'white' : 'black'), 0.03).alpha(0.9).hsl().string();
  return {
    small: cx("".concat(prefix, "-tag-small"), css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        padding: 2px 6px;\n        line-height: 1;\n      "])))),
    lang: cx(css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        position: absolute;\n        z-index: 2;\n        right: 0;\n        bottom: 8px;\n        background-color: ", ";\n        font-family: ", ";\n        color: ", ";\n        transition: opacity 0.1s;\n      "])), background, token.fontFamilyCode, colorTextSecondary)),
    tag: cx("".concat(prefix, "-tag"), css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n        color: ", " !important;\n        border-radius: ", "px;\n        P &:hover {\n          color: ", ";\n          background: ", ";\n        }\n      "])), colorText, token.borderRadius, colorText, token.colorFill))
  };
});
var LanguageTag = function LanguageTag(props) {
  var _ref3 = props || {},
    children = _ref3.children,
    _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? 'default' : _ref3$size,
    _ref3$theme = _ref3.theme,
    theme = _ref3$theme === void 0 ? 'light' : _ref3$theme;
  var _useStyles = useStyles({
      theme: theme
    }),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  return /*#__PURE__*/_jsx(Tag, {
    bordered: false,
    className: cx(styles.tag, styles.lang, size === 'small' && styles.small),
    children: children
  });
};
export default LanguageTag;