import _typeof from "@babel/runtime/helpers/esm/typeof";
import { useEffect, useRef } from 'react';

/**
 * 为 Highlight 添加 focus 时可以按键全选的能力
 * @param codeRef: React.RefObject<HTMLPreElement>
 */

export var useKeyDownCopyEvent = function useKeyDownCopyEvent(codeRef, onCopy) {
  // focus能力支持
  var _focus = useRef();
  function bindEvent(events, dom) {
    Object.keys(events).forEach(function (key) {
      if (_typeof(events[key]) === 'object' && events[key].handle) {
        dom.addEventListener(key, events[key].handle, events[key].options);
      } else {
        dom.addEventListener(key, events[key]);
      }
    });
    return function () {
      Object.keys(events).forEach(function (key) {
        if (_typeof(events[key]) === 'object' && events[key].handle) {
          dom.removeEventListener(key, events[key].handle, events[key].options);
        } else {
          dom.removeEventListener(key, events[key]);
        }
      });
    };
  }
  useEffect(function () {
    if (codeRef.current) {
      return bindEvent({
        keydown: function keydown(ev) {
          var selection = window.getSelection();
          // 拦截ctrl + a 并判断是否 focus
          if ((ev.ctrlKey || ev.metaKey) && ev.code === 'KeyA' && _focus.current && codeRef.current) {
            var range = document.createRange();
            range.selectNodeContents(codeRef.current);
            selection.removeAllRanges();
            selection.addRange(range);
            ev.preventDefault();
          }
          if ((ev.ctrlKey || ev.metaKey) && ev.code === 'KeyC' && _focus.current && codeRef.current) {
            if (onCopy && selection) {
              onCopy(selection.toString());
            }
          }
        },
        focus: function focus() {
          _focus.current = true;
        },
        blur: function blur() {
          _focus.current = false;
        }
      }, codeRef.current);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [codeRef.current, codeRef]);
  return null;
};