import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useEffect, useState } from 'react';
import { getHighlighter } from 'shikiji';
import { themeConfig } from "../theme";

// 目前支持的语言列表
export var languageMap = ['javascript', 'typescript', 'css', 'json', 'markdown', 'xml', 'yaml', 'tsx', 'jsx', 'java', 'python', 'sql', 'sh'];
export var useShiki = function useShiki(language, theme) {
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    shiki = _useState2[0],
    setShiki = _useState2[1];
  var initShiki = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var highlighter;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getHighlighter({
              langs: languageMap,
              themes: [themeConfig(true), themeConfig(false)]
            });
          case 2:
            highlighter = _context.sent;
            setShiki(highlighter);
          case 4:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function initShiki() {
      return _ref.apply(this, arguments);
    };
  }();
  useEffect(function () {
    initShiki();
  }, []);
  var renderShiki = function renderShiki(content) {
    if (shiki && shiki.getLoadedLanguages().includes(language)) {
      var result = shiki === null || shiki === void 0 ? void 0 : shiki.codeToHtml(content, {
        lang: language,
        theme: theme
      });
      return result;
    } else {
      return "<pre><code>".concat(content, "</code></pre>");
    }
  };
  return {
    loading: !shiki,
    renderShiki: renderShiki
  };
};