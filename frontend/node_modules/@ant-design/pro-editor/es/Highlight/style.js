import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;
import Color from 'color';
import { createStyles } from "../theme";
import { getThemeColor } from "./theme/colors";
export var useStyles = createStyles(function (_ref, _ref2) {
  var css = _ref.css,
    cx = _ref.cx,
    token = _ref.token,
    prefixCls = _ref.prefixCls;
  var theme = _ref2.theme,
    type = _ref2.type;
  var prefix = "".concat(prefixCls, "-").concat(token === null || token === void 0 ? void 0 : token.editorPrefix, "-highlight");
  var _getThemeColor = getThemeColor(theme === 'dark'),
    colorFillTertiary = _getThemeColor.colorFillTertiary,
    colorText = _getThemeColor.colorText,
    colorTextSecondary = _getThemeColor.colorTextSecondary;
  var typeStylish = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      background-color: ", ";\n    "])), type === 'block' ? colorFillTertiary : 'transparent');
  var lighterTypeStylish = css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      background-color: ", ";\n    "])), type === 'block' ? Color(colorFillTertiary).alpha(0.9).hsl().string() : 'transparent');
  return {
    wrapper: cx("".concat(prefix, "-wrapper"), lighterTypeStylish, css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n          border-radius: ", "px;\n          .", "-copy {\n            background-color: transparent;\n            position: inherit;\n            width: 30px;\n            padding-left: 6px;\n          }\n        "])), token.borderRadius, prefix)),
    expland: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        color: ", ";\n      "])), Color(colorText).alpha(0.8).hsl().string()),
    copy: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n        color: ", ";\n      "])), Color(colorText).alpha(0.6).hsl().string()),
    header: cx("".concat(prefix, "-header"), css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n          background-color: ", ";\n          padding: 4px 8px;\n          border-radius: ", "px;\n          width: auto !important; // override self width\n        "])), type === 'block' ? token.colorFillTertiary : 'transparent', token.borderRadius), css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n          .", "-btn {\n            &:hover {\n              color: ", " !important;\n            }\n          }\n        "])), prefix, colorTextSecondary)),
    container: cx("".concat(prefix, "-container"), typeStylish, css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n          position: relative;\n          margin: 0;\n          border-radius: ", "px;\n          transition: background-color 100ms ", ";\n\n          :not(:hover) {\n            .", "-copy {\n              visibility: hidden;\n              opacity: 0;\n            }\n\n            .", "-tag {\n              visibility: hidden;\n              opacity: 0;\n            }\n          }\n\n          pre {\n            margin: 0 !important;\n            padding: ", " !important;\n            background: none !important;\n          }\n\n          code {\n            background: transparent !important;\n          }\n        "])), token.borderRadius, token.motionEaseOut, prefix, prefix, type === 'pure' ? 0 : "16px 24px")),
    trigger: css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n        min-width: 100px;\n        display: flex;\n        justify-content: center;\n        span {\n          font-family: ", " !important;\n        }\n      "])), token.fontFamilyCode),
    lang: cx(css(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n          position: absolute;\n          z-index: 2;\n          right: 0;\n          bottom: 8px;\n\n          font-family: ", ";\n          color: ", ";\n\n          transition: opacity 0.1s;\n        "])), token.fontFamilyCode, token.colorTextSecondary)),
    select: css(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n        min-width: 100px;\n        .", "-btn {\n          color: ", ";\n        }\n        .", "-select-selector {\n          padding-inline-end: 4px !important;\n        }\n        .", "-select-selection-overflow-item-suffix {\n          .", "-select-selection-search {\n            display: none;\n          }\n        }\n      "])), prefixCls, colorText, prefixCls, prefixCls, prefixCls)
  };
});