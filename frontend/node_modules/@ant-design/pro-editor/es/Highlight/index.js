import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { useThemeMode } from 'antd-style';
import { memo } from 'react';
import { ConfigProvider } from "../ConfigProvider";
import { HighlightBase } from "./defalut";
import { useStyles } from "./style";
import { THEME_AUTO } from "./theme";
import FullFeatureWrapper from "./wrapper";
import { jsx as _jsx } from "react/jsx-runtime";
var Highlight = /*#__PURE__*/memo(function (props) {
  var type = props.type,
    _props$theme = props.theme,
    outTheme = _props$theme === void 0 ? THEME_AUTO : _props$theme,
    containerWrapper = props.containerWrapper;
  // 当为 auto 的时候，根据系统主题来判断
  var _useThemeMode = useThemeMode(),
    appearance = _useThemeMode.appearance;
  var ProviderTheme = appearance === 'dark' ? 'dark' : 'light';
  var theme = outTheme === THEME_AUTO ? ProviderTheme : outTheme;
  var _useStyles = useStyles({
      type: type,
      theme: theme
    }),
    token = _useStyles.theme;
  return /*#__PURE__*/_jsx(ConfigProvider, {
    componentToken: {
      Select: {
        colorBgTextHover: token.colorFillSecondary,
        colorBgTextActive: token.colorFill
      },
      Button: {
        colorText: token.colorTextTertiary,
        colorBgTextHover: token.colorFillSecondary,
        colorBgTextActive: token.colorFill
      }
    },
    children: containerWrapper ? /*#__PURE__*/_jsx(FullFeatureWrapper, _objectSpread({
      theme: theme
    }, props)) : /*#__PURE__*/_jsx(HighlightBase, _objectSpread({
      theme: theme
    }, props))
  });
});
export * from "./defalut";
export * from "./wrapper";
export { Highlight };