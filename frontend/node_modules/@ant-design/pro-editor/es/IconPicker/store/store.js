import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import isEqual from 'fast-deep-equal';
import produce from 'immer';
import { extractListFormIconfontJS, findNeighborIndex } from "../utils/iconfont";
import { initialState } from "./initialState";
var vanillaStore = function vanillaStore(set, get) {
  return _objectSpread(_objectSpread({}, initialState), {}, {
    resetIcon: function resetIcon() {
      set({
        icon: null
      });
    },
    togglePanel: function togglePanel() {
      set(function (s) {
        return _objectSpread(_objectSpread({}, s), {}, {
          open: !s.open
        });
      });
    },
    selectIcon: function selectIcon(icon) {
      var _get$onIconChange, _get;
      set({
        icon: icon,
        open: false,
        filterKeywords: undefined
      }, false, '选择 Icon');
      (_get$onIconChange = (_get = get()).onIconChange) === null || _get$onIconChange === void 0 || _get$onIconChange.call(_get, icon);
    },
    addScript: function addScript(script) {
      var _get2 = get(),
        selectScript = _get2.selectScript,
        iconfontScripts = _get2.iconfontScripts,
        updateScripts = _get2.updateScripts;
      set({
        showForm: false
      });
      updateScripts(produce(iconfontScripts, function (draft) {
        if (!draft.find(function (i) {
          return i.url === script.url;
        })) {
          draft.push(script);
        }
      }));
      selectScript(script.url);
    },
    updateScripts: function updateScripts(scripts) {
      var _get3 = get(),
        onIconfontScriptsChange = _get3.onIconfontScriptsChange,
        iconfontScripts = _get3.iconfontScripts;
      if (isEqual(iconfontScripts, scripts)) return;
      set({
        iconfontScripts: scripts
      });
      onIconfontScriptsChange === null || onIconfontScriptsChange === void 0 || onIconfontScriptsChange(scripts);
    },
    toggleForm: function toggleForm(visible) {
      set(function (s) {
        return _objectSpread(_objectSpread({}, s), {}, {
          showForm: typeof visible === 'undefined' ? !s.showForm : visible
        });
      });
    },
    selectScript: function () {
      var _selectScript = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {
        var _get4, onActiveIconfontScriptChange, iconfontScripts, res, jsText, iconfontList;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _get4 = get(), onActiveIconfontScriptChange = _get4.onActiveIconfontScriptChange;
              onActiveIconfontScriptChange === null || onActiveIconfontScriptChange === void 0 || onActiveIconfontScriptChange(url);
              // 没有 url 的情况下，不选择 script
              if (url) {
                _context.next = 5;
                break;
              }
              set({
                activeIconfontScript: '',
                iconfontIconList: []
              });
              return _context.abrupt("return");
            case 5:
              iconfontScripts = get().iconfontScripts.find(function (i) {
                return i.url === url;
              });
              _context.next = 8;
              return fetch(url);
            case 8:
              res = _context.sent;
              _context.next = 11;
              return res.text();
            case 11:
              jsText = _context.sent;
              iconfontList = extractListFormIconfontJS(jsText);
              set({
                activeIconfontScript: url,
                showForm: false,
                iconfontIconList: iconfontList.map(function (i) {
                  return {
                    type: 'iconfont',
                    componentName: iconfontScripts.name,
                    scriptUrl: url,
                    props: {
                      type: i
                    }
                  };
                })
              });
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function selectScript(_x) {
        return _selectScript.apply(this, arguments);
      }
      return selectScript;
    }(),
    removeScripts: function removeScripts(url) {
      var _nextIconfontScripts$;
      var _get5 = get(),
        iconfontScripts = _get5.iconfontScripts,
        selectScript = _get5.selectScript,
        updateScripts = _get5.updateScripts;
      var nextIconfontScripts = iconfontScripts.filter(function (i) {
        return i.url !== url;
      });

      // 找到临近的图标库并选中

      var currentIndex = iconfontScripts.findIndex(function (i) {
        return i.url === url;
      });
      var nextIndex = findNeighborIndex(nextIconfontScripts, currentIndex);
      var nextScript = (_nextIconfontScripts$ = nextIconfontScripts[nextIndex]) === null || _nextIconfontScripts$ === void 0 ? void 0 : _nextIconfontScripts$.url;
      updateScripts(nextIconfontScripts);
      selectScript(nextScript);
    }
  });
};
export default vanillaStore;