import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { Resizable } from 're-resizable';
import { memo, useMemo } from 'react';
import { Center } from 'react-layout-kit';
import useControlledState from 'use-merge-value';
import { DownOutlined, LeftOutlined, RightOutlined, UpOutlined } from '@ant-design/icons';
import { useStyle } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var DEFAULT_HEIGHT = 150;
var DEFAULT_WIDTH = 400;
var revesePlacement = function revesePlacement(placement) {
  switch (placement) {
    case 'bottom':
      return 'top';
    case 'top':
      return 'bottom';
    case 'right':
      return 'left';
    case 'left':
      return 'right';
  }
};
var FixMode = /*#__PURE__*/memo(function (_ref) {
  var children = _ref.children,
    _ref$placement = _ref.placement,
    placement = _ref$placement === void 0 ? 'right' : _ref$placement,
    resize = _ref.resize,
    style = _ref.style,
    size = _ref.size,
    customizeDefaultSize = _ref.defaultSize,
    minWidth = _ref.minWidth,
    minHeight = _ref.minHeight,
    maxHeight = _ref.maxHeight,
    maxWidth = _ref.maxWidth,
    onSizeChange = _ref.onSizeChange,
    onSizeDragging = _ref.onSizeDragging,
    _ref$expandable = _ref.expandable,
    expandable = _ref$expandable === void 0 ? true : _ref$expandable,
    expand = _ref.isExpand,
    onExpandChange = _ref.onExpandChange,
    className = _ref.className;
  var isVertical = placement === 'top' || placement === 'bottom';
  var _useStyle = useStyle(),
    styles = _useStyle.styles,
    cx = _useStyle.cx;
  var _useControlledState = useControlledState(true, {
      value: expand,
      onChange: onExpandChange
    }),
    _useControlledState2 = _slicedToArray(_useControlledState, 2),
    isExpand = _useControlledState2[0],
    setIsExpand = _useControlledState2[1];

  // 只有配置了 resize 和 isExpand 属性后才可拖拽
  var canResizing = resize !== false && isExpand;
  var resizeHandleClassNames = useMemo(function () {
    if (!canResizing) return {};
    return _defineProperty({}, revesePlacement(placement), styles["".concat(revesePlacement(placement), "Handle")]);
  }, [canResizing, placement]);
  var resizing = _objectSpread(_defineProperty({
    top: false,
    bottom: false,
    right: false,
    left: false,
    topRight: false,
    bottomRight: false,
    bottomLeft: false,
    topLeft: false
  }, revesePlacement(placement), true), resize);
  var defaultSize = useMemo(function () {
    if (isVertical) return _objectSpread({
      width: '100%',
      height: DEFAULT_HEIGHT
    }, customizeDefaultSize);
    return _objectSpread({
      width: DEFAULT_WIDTH,
      height: '100%'
    }, customizeDefaultSize);
  }, [isVertical]);
  var sizeProps = isExpand ? {
    minWidth: typeof minWidth === 'number' ? Math.max(minWidth, 0) : 280,
    minHeight: typeof minHeight === 'number' ? Math.max(minHeight, 0) : undefined,
    maxHeight: typeof maxHeight === 'number' ? Math.max(maxHeight, 0) : undefined,
    maxWidth: typeof maxWidth === 'number' ? Math.max(maxWidth, 0) : undefined,
    defaultSize: defaultSize,
    size: size,
    style: style
  } : {
    minWidth: 0,
    minHeight: 0,
    size: {
      width: 0,
      height: 0
    }
  };
  var _useMemo = useMemo(function () {
      switch (placement) {
        case 'top':
          return {
            className: 'Bottom',
            Arrow: DownOutlined
          };
        case 'bottom':
          return {
            className: 'Top',
            Arrow: UpOutlined
          };
        case 'right':
          return {
            className: 'Left',
            Arrow: LeftOutlined
          };
        case 'left':
          return {
            className: 'Right',
            Arrow: RightOutlined
          };
      }
    }, [styles, placement]),
    Arrow = _useMemo.Arrow,
    arrowPlacement = _useMemo.className;
  return /*#__PURE__*/_jsxs("div", {
    className: cx(styles.container, className),
    style: _defineProperty({}, "border".concat(arrowPlacement, "Width"), 1),
    children: [expandable && /*#__PURE__*/_jsx(Center, {
      className: cx(styles["toggle".concat(arrowPlacement)]),
      onClick: function onClick() {
        setIsExpand(!isExpand);
      },
      style: {
        opacity: isExpand ? undefined : 1
      },
      children: /*#__PURE__*/_jsx(Arrow, {
        rotate: isExpand ? 180 : 0
      })
    }), /*#__PURE__*/_jsx(Resizable, _objectSpread(_objectSpread({}, sizeProps), {}, {
      className: styles.fixed,
      enable: canResizing ? resizing : undefined,
      handleClasses: resizeHandleClassNames,
      onResizeStop: function onResizeStop(e, direction, ref, delta) {
        onSizeChange === null || onSizeChange === void 0 || onSizeChange(delta, {
          width: ref.style.width,
          height: ref.style.height
        });
      },
      onResize: function onResize(_, direction, ref, delta) {
        onSizeDragging === null || onSizeDragging === void 0 || onSizeDragging(delta, {
          width: ref.style.width,
          height: ref.style.height
        });
      },
      children: children
    }))]
  });
});
export { FixMode };