import { memo } from 'react';
import { withProvider } from '..';
import { FixMode } from "./FixMode";
import { FloatMode } from "./FloatMode";
import { jsx as _jsx } from "react/jsx-runtime";
var Draggable = /*#__PURE__*/memo(function (_ref) {
  var children = _ref.children,
    className = _ref.className,
    mode = _ref.mode,
    placement = _ref.placement,
    resize = _ref.resize,
    style = _ref.style,
    position = _ref.position,
    onPositionChange = _ref.onPositionChange,
    size = _ref.size,
    defaultSize = _ref.defaultSize,
    defaultPosition = _ref.defaultPosition,
    minWidth = _ref.minWidth,
    minHeight = _ref.minHeight,
    maxHeight = _ref.maxHeight,
    maxWidth = _ref.maxWidth,
    onSizeChange = _ref.onSizeChange,
    onSizeDragging = _ref.onSizeDragging,
    _ref$expandable = _ref.expandable,
    expandable = _ref$expandable === void 0 ? true : _ref$expandable,
    isExpand = _ref.isExpand,
    onExpandChange = _ref.onExpandChange;
  switch (mode) {
    case 'fixed':
    default:
      return /*#__PURE__*/_jsx(FixMode
      // 尺寸
      , {
        size: size,
        defaultSize: defaultSize,
        onSizeDragging: onSizeDragging,
        onSizeChange: onSizeChange,
        minHeight: minHeight,
        minWidth: minWidth,
        maxHeight: maxHeight,
        maxWidth: maxWidth
        // 缩放
        ,
        resize: resize,
        onExpandChange: onExpandChange,
        expandable: expandable,
        isExpand: isExpand,
        className: className,
        placement: placement,
        style: style,
        children: children
      });
    case 'float':
      return /*#__PURE__*/_jsx(FloatMode
      // 坐标
      , {
        defaultPosition: defaultPosition,
        position: position,
        onPositionChange: onPositionChange
        // 尺寸
        ,
        minHeight: minHeight,
        minWidth: minWidth,
        maxHeight: maxHeight,
        maxWidth: maxWidth,
        defaultSize: defaultSize,
        size: size,
        onSizeDragging: onSizeDragging,
        onSizeChange: onSizeChange
        // 缩放
        ,
        resize: resize,
        canResizing: resize !== false,
        className: className,
        style: style,
        children: children
      });
  }
});
var WithProviderDraggable = withProvider(Draggable);
export { WithProviderDraggable as Draggable };