/// <reference types="react" />
import { StoreApi } from 'zustand';
import { InternalProBuilderStore, createStore } from './createStore';
declare const Provider: ({ createStore, children }: {
    createStore: () => StoreApi<InternalProBuilderStore>;
    children: import("react").ReactNode;
}) => import("react").FunctionComponentElement<import("react").ProviderProps<StoreApi<InternalProBuilderStore>>>, useStore: import("zustand-utils").UseContextStore<StoreApi<InternalProBuilderStore>>, useStoreApi: () => {
    setState: (partial: InternalProBuilderStore | Partial<InternalProBuilderStore> | ((state: InternalProBuilderStore) => InternalProBuilderStore | Partial<InternalProBuilderStore>), replace?: boolean) => void;
    getState: () => InternalProBuilderStore;
    getInitialState: () => InternalProBuilderStore;
    subscribe: (listener: (state: InternalProBuilderStore, prevState: InternalProBuilderStore) => void) => () => void;
    destroy: () => void;
};
export { Provider, createStore, useStore, useStoreApi };
export type { InternalProBuilderStore, ProBuilderState } from './createStore';
export * from './selectors';
export type { AwarenessEditor } from './slices/awareness';
export { EditorMode, TabKey } from './slices/general';
