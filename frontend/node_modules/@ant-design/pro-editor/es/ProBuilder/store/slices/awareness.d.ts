import type { NumberSize } from 're-resizable';
import type { Position } from 'react-rnd';
import { Viewport } from 'reactflow';
import { PartialDeep } from 'type-fest';
import { StateCreator } from 'zustand';
import { InternalProBuilderStore } from '../createStore';
/**
 * 编辑器框架演示状态
 */
export interface AwarenessEditor {
    /**
     * 面板悬浮模式下的坐标值
     */
    panelPosition: Position;
    /**
     * 面板的尺寸
     */
    panelSize: Partial<NumberSize>;
    /**
     * 组件在画板上的尺寸
     */
    componentSizeOnCanvas?: {
        width?: number;
        height?: number;
    };
    /**
     * 面板展开状态
     */
    panelExpand: boolean;
    /**
     * 画布当前的视图
     */
    viewport: Viewport;
}
export interface AwarenessSliceState<T = object> {
    /** 编辑器供外部感知的视图状态 */
    assetAwareness: T;
    /**
     * 编辑器供外部感知的视图状态变化时的回调函数
     * @param presenceAsset - 编辑器供外部感知的视图状态
     */
    onAssetAwarenessChange?: (awareness: T) => void;
    /** 编辑器受外部感知的状态 */
    editorAwareness: AwarenessEditor;
    /**
     * 编辑器受外部感知的状态变化时的回调函数
     * @param presence - 编辑器受外部感知的状态
     */
    onEditorAwarenessChange?: (awareness: AwarenessEditor) => void;
}
export interface AwarenessPublicAction {
}
export interface AwarenessSlice extends AwarenessPublicAction, AwarenessSliceState {
    internalUpdateEditorAwareness: (awareness: PartialDeep<AwarenessEditor>) => void;
    internalUpdateAssetAwareness: <T>(awareness: T) => void;
}
export declare const awarenessSlice: StateCreator<InternalProBuilderStore, [
    ['zustand/devtools', never]
], [
], AwarenessSlice>;
