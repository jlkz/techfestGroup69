import { StateCreator } from 'zustand';
import { ComponentAsset } from "../../../ComponentAsset";
import { DocWithHistoryManager, UserActionParams } from '../../utils/yjs';
import { InternalProBuilderStore } from '../createStore';
interface EditorOnChangePayload<Config> {
    config: Config;
    props: any;
    isEmpty: boolean;
}
export type OnConfigChange<Config> = (payload: EditorOnChangePayload<Config>) => void;
export interface ConfigPublicState<Config = any> {
    /** 所有组件资产 */
    componentAsset?: ComponentAsset<Config>;
    /** 编辑器的配置属性 */
    config?: Config;
    /**
     * 编辑器的配置属性变化时的回调函数
     * @param config - 编辑器的配置属性
     */
    onConfigChange?: OnConfigChange<Config>;
}
export interface ConfigSliceState extends ConfigPublicState {
    /** 组件的 props */
    props?: any;
    yjsDoc: DocWithHistoryManager<{
        config: any;
    }>;
}
export interface ActionPayload {
    type: string;
    payload: any;
}
export interface ActionOptions {
    recordHistory?: boolean;
    replace?: boolean;
    payload?: Partial<UserActionParams>;
}
/**
 * 公共配置操作接口
 */
export interface ConfigPublicAction {
    /**
     * 导出配置
     */
    exportConfig: () => void;
    /**
     * 重置配置
     */
    resetConfig: () => void;
    /**
     * 更新配置
     * @template T - 配置对象类型
     * @param {Partial<T>} config - 需要更新的配置对象
     * @param {ActionOptions} [options] - 配置项
     */
    setConfig: <T>(config: Partial<T>, options?: ActionOptions) => void;
}
export interface ConfigSlice extends ConfigPublicAction, ConfigSliceState {
    /**
     * 内部更新配置
     **/
    internalUpdateConfig: <T>(config: Partial<T>, payload?: ActionPayload, replace?: boolean) => void;
}
export declare const configSlice: StateCreator<InternalProBuilderStore, [
    ['zustand/devtools', never]
], [
], ConfigSlice>;
export {};
