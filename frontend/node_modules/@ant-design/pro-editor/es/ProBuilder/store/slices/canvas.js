import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
// ======== state ======== //

var initialCanvasState = {
  // 交互
  interaction: {},
  onInteractionChange: null,
  enableCanvasInteraction: true
};
export var canvasSlice = function canvasSlice(set, get) {
  return _objectSpread(_objectSpread({}, initialCanvasState), {}, {
    //内部更新交互参数方法
    internalUpdateCanvasInteract: function internalUpdateCanvasInteract(interact, action) {
      var _get = get(),
        onInteractionChange = _get.onInteractionChange;
      set({
        interaction: interact
      }, false, {
        type: (action === null || action === void 0 ? void 0 : action.type) || '🕹内部更新：interaction'
      });
      onInteractionChange === null || onInteractionChange === void 0 || onInteractionChange(interact);
    },
    /**
     * 开关画布的激活态
     */
    toggleCanvasInteraction: function toggleCanvasInteraction() {
      var _get2 = get(),
        enableCanvasInteraction = _get2.enableCanvasInteraction;
      set({
        enableCanvasInteraction: !enableCanvasInteraction
      });
    },
    /**
     * 取消画布的激活
     */
    deselectCanvas: function deselectCanvas() {
      var _get3 = get(),
        internalUpdateCanvasInteract = _get3.internalUpdateCanvasInteract;
      internalUpdateCanvasInteract({
        status: 'unSelected'
      });
    },
    setCanvasInteraction: function setCanvasInteraction(interaction) {
      get().internalUpdateCanvasInteract(interaction, {
        name: 'updateCanvasInteraction 触发'
      });
    },
    setViewport: function setViewport(viewPort) {
      var _get4 = get(),
        internalUpdateEditorAwareness = _get4.internalUpdateEditorAwareness,
        editorAwareness = _get4.editorAwareness;
      internalUpdateEditorAwareness({
        viewport: _objectSpread(_objectSpread({}, editorAwareness.viewport), viewPort)
      });
    }
  });
};