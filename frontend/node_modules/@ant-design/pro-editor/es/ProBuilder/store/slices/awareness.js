import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import merge from 'lodash.merge';

/**
 * 编辑器框架演示状态
 */

// ======== state ======== //

var initialAwarenessState = {
  assetAwareness: {},
  onAssetAwarenessChange: null,
  editorAwareness: {
    // 面板
    panelPosition: {
      x: 0,
      y: 0
    },
    panelSize: {
      width: 340
    },
    panelExpand: true,
    viewport: {
      x: 0,
      y: 0,
      zoom: 1
    }
  },
  onEditorAwarenessChange: null
};

// eslint-disable-next-line @typescript-eslint/no-empty-interface

export var awarenessSlice = function awarenessSlice(set, get) {
  return _objectSpread(_objectSpread({}, initialAwarenessState), {}, {
    internalUpdateAssetAwareness: function internalUpdateAssetAwareness(awareness) {
      var _get = get(),
        onAssetAwarenessChange = _get.onAssetAwarenessChange,
        assetAwareness = _get.assetAwareness;
      var nextAwarenessView = _objectSpread(_objectSpread({}, assetAwareness), awareness);
      set({
        assetAwareness: nextAwarenessView
      }, false, {
        type: '🕹内部更新：assetAwareness',
        payload: awareness
      });
      onAssetAwarenessChange === null || onAssetAwarenessChange === void 0 || onAssetAwarenessChange(nextAwarenessView);
    },
    internalUpdateEditorAwareness: function internalUpdateEditorAwareness(awareness) {
      var _get2 = get(),
        onEditorAwarenessChange = _get2.onEditorAwarenessChange,
        editorAwareness = _get2.editorAwareness;
      var nextAwareness = merge({}, editorAwareness, awareness);
      set({
        editorAwareness: nextAwareness
      }, false, {
        type: '🕹内部更新：editorAwareness',
        payload: awareness
      });
      onEditorAwarenessChange === null || onEditorAwarenessChange === void 0 || onEditorAwarenessChange(nextAwareness);
    }
  });
};