import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import isEqual from 'fast-deep-equal';
import { memo, useEffect } from 'react';
import { storeApiSetState } from 'zustand-utils';
import { shallow } from 'zustand/shallow';
import { useProBuilder } from "../../hooks/useProBuilder";
import { useStore, useStoreApi } from "../../store";
var AssetStoreUpdater = /*#__PURE__*/memo(function () {
  var instance = useProBuilder();
  var _useStore = useStore(function (s) {
      return [s.componentAsset.componentStoreApi, s.componentAsset.configSelector, s.componentAsset.setConfig, s.config];
    }, shallow),
    _useStore2 = _slicedToArray(_useStore, 4),
    useAssetStoreApi = _useStore2[0],
    configSelector = _useStore2[1],
    setConfig = _useStore2[2],
    config = _useStore2[3];
  var assetStoreApi = useAssetStoreApi();
  useEffect(function () {
    storeApiSetState(assetStoreApi, instance, false, {
      type: '⏬ 注入 editor 方法',
      payload: Object.keys(instance)
    });
  }, []);

  // 将计算后的默认值传给面板
  // 用等式做一次优化，不然每次都会重新计算
  var defaultConfig = useStore(function (s) {
    var config;
    if (s.componentAsset.defaultConfig) {
      config = s.componentAsset.defaultConfig;
    } else {
      if (s.componentAsset.configSelector) {
        config = s.componentAsset.configSelector(s.componentAsset.getDefaultConfig(s.mode));
      } else {
        config = s.componentAsset.getDefaultConfig(s.mode);
      }
    }
    return config;
  }, isEqual);
  var proBuilderStoreApi = useStoreApi();

  // 用 defaultConfig 更新 config
  useEffect(function () {
    if (!!config) return;
    var state = {
      config: defaultConfig
    };
    storeApiSetState(proBuilderStoreApi, state, false, {
      type: '⏬ 注入初始化 config',
      payload: state
    });
    proBuilderStoreApi.getState().yjsDoc.updateHistoryData(state);
    setConfig(defaultConfig, function (state) {
      storeApiSetState(assetStoreApi, state, false, {
        type: '🔄 初始化状态',
        payload: state
      });
    });
  }, [defaultConfig]);

  // 将 proBuilderStore 的 config 自动同步到  assetStore
  useEffect(function () {
    if (!!config) {
      var assetConfig = configSelector(assetStoreApi.getState());
      if (isEqual(assetConfig, config)) return;
      setConfig(config, function (state) {
        storeApiSetState(assetStoreApi, state, false, {
          type: '🔄 同步 Editor 状态',
          payload: state
        });
      });
    }
  }, [config]);
  return null;
});
export default AssetStoreUpdater;