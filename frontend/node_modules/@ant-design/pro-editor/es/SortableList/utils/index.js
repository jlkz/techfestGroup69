import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import isEqual from 'lodash.isequal';
import { nanoid } from 'nanoid';
import { useEffect, useState } from 'react';
var defaultInitializer = function defaultInitializer(index) {
  return index;
};
export function createRange(length) {
  var initializer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultInitializer;
  return _toConsumableArray(new Array(length)).map(function (_, index) {
    return initializer(index);
  });
}

/**
 * Moves an array item from one position in an array to another.
 *
 * Note: This is a pure function so a new array will be returned, instead
 * of altering the array argument.
 *
 * @param array         Array in which to move an item.         (required)
 * @param moveIndex     The index of the item to move.          (required)
 * @param toIndex       The index to move item at moveIndex to. (required)
 */
export function move(array, moveIndex, toIndex) {
  var length = array.length;
  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {
    return array;
  }
  var item = array[moveIndex];
  var diff = moveIndex - toIndex;
  if (diff > 0) {
    // move left
    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));
  }
  if (diff < 0) {
    // move right
    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));
  }
  return array;
}
export var useLatest = function useLatest(props) {
  var _useState = useState(props),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  useEffect(function () {
    if (!isEqual(props, state)) {
      setState(props);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props]);
  return [state, setState];
};
export var getIndexOfActiveItem = function getIndexOfActiveItem(list, id) {
  return id ? list.findIndex(function (item) {
    return item === id;
  }) : -1;
};
export var getUUID = function getUUID(index) {
  return process.env.NODE_ENV === 'test' ? "test-".concat(index) : nanoid();
};