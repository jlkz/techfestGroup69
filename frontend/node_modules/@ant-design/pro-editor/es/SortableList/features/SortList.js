import { Empty } from 'antd';
import isEqual from 'lodash.isequal';
import { memo } from 'react';
import { shallow } from 'zustand/shallow';
import { List, SortableItem } from "../components";
import { useStore } from "../store";
import { PlusOutlined } from '@ant-design/icons';
import { Button } from "../../antd";
import { useStyle } from "../style";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var selector = function selector(s) {
  return {
    renderItem: s.renderItem,
    renderContent: s.renderContent,
    renderEmpty: s.renderEmpty,
    getItemStyles: s.getItemStyles,
    keyManager: s.keyManager,
    actions: s.actions,
    hideRemove: s.hideRemove,
    handle: s.handle,
    creatorButtonProps: s.creatorButtonProps,
    dispatchListData: s.dispatchListData
  };
};
var SortableList = function SortableList() {
  var _useStore = useStore(selector, shallow),
    dispatchListData = _useStore.dispatchListData,
    renderItem = _useStore.renderItem,
    renderContent = _useStore.renderContent,
    renderEmpty = _useStore.renderEmpty,
    _useStore$creatorButt = _useStore.creatorButtonProps,
    creatorButtonProps = _useStore$creatorButt === void 0 ? false : _useStore$creatorButt,
    hideRemove = _useStore.hideRemove,
    handle = _useStore.handle,
    keyManager = _useStore.keyManager,
    getItemStyles = _useStore.getItemStyles,
    actions = _useStore.actions;
  var _useStyle = useStyle(),
    styles = _useStyle.styles;
  var items = useStore(function (s) {
    return s.value;
  }, isEqual);
  var _ref = creatorButtonProps || {},
    record = _ref.record,
    _ref$creatorButtonTex = _ref.creatorButtonText,
    creatorButtonText = _ref$creatorButtonTex === void 0 ? '添加一列' : _ref$creatorButtonTex,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? 'bottom' : _ref$position,
    style = _ref.style;
  var CreateButton = function CreateButton(_ref2) {
    var _ref2$empty = _ref2.empty,
      empty = _ref2$empty === void 0 ? false : _ref2$empty;
    return /*#__PURE__*/_jsx(Button, {
      block: empty ? false : true,
      size: 'small',
      style: empty ? null : style,
      className: styles.btnAdd,
      onClick: function onClick() {
        dispatchListData({
          type: 'addItem',
          item: record(items.length)
        });
      },
      icon: /*#__PURE__*/_jsx(PlusOutlined, {}),
      children: creatorButtonText
    });
  };
  return Array.isArray(items) && items.length === 0 ? renderEmpty ? renderEmpty() : /*#__PURE__*/_jsx(Empty, {
    image: Empty.PRESENTED_IMAGE_SIMPLE,
    description: "\u6682\u65E0\u6570\u636E",
    children: creatorButtonProps !== false ? /*#__PURE__*/_jsx(CreateButton, {
      empty: true
    }) : null
  }) : /*#__PURE__*/_jsxs(_Fragment, {
    children: [creatorButtonProps !== false && position === 'top' ? /*#__PURE__*/_jsx(CreateButton, {}) : null, /*#__PURE__*/_jsx(List, {
      children: items.map(function (item, index) {
        return /*#__PURE__*/_jsx(SortableItem, {
          id: keyManager[index],
          item: item,
          index: index,
          actions: actions,
          hideRemove: hideRemove,
          handle: handle,
          renderItem: renderItem,
          renderContent: renderContent,
          getItemStyles: getItemStyles,
          onRemove: function onRemove() {
            return dispatchListData({
              type: 'removeItem',
              index: index
            });
          },
          useDragOverlay: true
        }, keyManager[index]);
      })
    }), creatorButtonProps !== false && position === 'bottom' ? /*#__PURE__*/_jsx(CreateButton, {}) : null]
  });
};
export default /*#__PURE__*/memo(SortableList);