import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { defaultDropAnimation, DragOverlay } from '@dnd-kit/core';
import { memo } from 'react';
import { shallow } from 'zustand/shallow';
import { Item } from "../components";
import { defaultDropAnimationSideEffects } from '@dnd-kit/core';
import isEqual from 'lodash.isequal';
import { useStore } from "../store";
import { getIndexOfActiveItem } from "../utils";
import { jsx as _jsx } from "react/jsx-runtime";
var selector = function selector(s) {
  return {
    activeId: s.activeId,
    handle: s.handle,
    hideRemove: s.hideRemove,
    renderItem: s.renderItem,
    renderContent: s.renderContent,
    getItemStyles: s.getItemStyles
  };
};
var Overlay = function Overlay() {
  var _useStore = useStore(selector, shallow),
    activeId = _useStore.activeId,
    renderItem = _useStore.renderItem,
    handle = _useStore.handle,
    hideRemove = _useStore.hideRemove,
    getItemStyles = _useStore.getItemStyles,
    renderContent = _useStore.renderContent;
  var items = useStore(function (s) {
    return s.value;
  }, isEqual);
  var keyManager = useStore(function (s) {
    return s.keyManager;
  }, isEqual);
  var activeIndex = getIndexOfActiveItem(keyManager, activeId);
  return /*#__PURE__*/_jsx(DragOverlay, {
    adjustScale: false,
    dropAnimation: _objectSpread(_objectSpread({}, defaultDropAnimation), {}, {
      sideEffects: defaultDropAnimationSideEffects({
        styles: {
          active: {
            opacity: '0.5'
          }
        }
      })
    }),
    children: activeId ? /*#__PURE__*/_jsx(Item, {
      id: activeId,
      dragOverlay: true,
      index: activeIndex,
      item: items[activeIndex],
      renderItem: renderItem,
      renderContent: renderContent,
      style: getItemStyles({
        id: activeId,
        index: activeIndex,
        isSorting: true,
        isDragging: true,
        overIndex: -1,
        isDragOverlay: true
      }),
      hideRemove: hideRemove,
      handle: handle
    }) : null
  });
};
export default /*#__PURE__*/memo(Overlay);