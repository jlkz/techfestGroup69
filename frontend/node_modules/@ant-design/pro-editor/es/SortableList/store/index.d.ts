/// <reference types="react" />
import type { StoreApi } from 'zustand';
import type { Store } from './store';
declare const createStore: (showDevTools: boolean) => import("zustand/traditional").UseBoundStoreWithEqualityFn<Omit<StoreApi<Store>, "setState"> & {
    setState<A extends string | {
        type: string;
    }>(partial: Store | Partial<Store> | ((state: Store) => Store | Partial<Store>), replace?: boolean, action?: A): void;
}>;
declare const useStore: import("zustand-utils").UseContextStore<StoreApi<Store>>, useStoreApi: () => {
    setState: (partial: Store | Partial<Store> | ((state: Store) => Store | Partial<Store>), replace?: boolean) => void;
    getState: () => Store;
    getInitialState: () => Store;
    subscribe: (listener: (state: Store, prevState: Store) => void) => () => void;
    destroy: () => void;
}, Provider: ({ createStore, children }: {
    createStore: () => StoreApi<Store>;
    children: import("react").ReactNode;
}) => import("react").FunctionComponentElement<import("react").ProviderProps<StoreApi<Store>>>;
export type { Store } from './store';
export { Provider, createStore, useStore, useStoreApi };
