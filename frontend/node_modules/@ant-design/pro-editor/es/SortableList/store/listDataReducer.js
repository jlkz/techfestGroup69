import { arrayMove } from '@dnd-kit/sortable';
import { produce } from 'immer';
import merge from 'lodash.merge';
export var listDataReducer = function listDataReducer(value, payload) {
  switch (payload.type) {
    case 'moveItem':
      var activeIndex = payload.activeIndex,
        overIndex = payload.overIndex;
      if (activeIndex === overIndex) return;
      if (activeIndex < 0 || activeIndex >= value.length || overIndex < 0 || overIndex >= value.length) {
        return;
      }
      return produce(value, function (draft) {
        var sortedItems = arrayMove(draft, activeIndex, overIndex);
        return sortedItems;
      });
    case 'removeItem':
      var indexSet = new Set(Array.isArray(payload.index) ? payload.index : [payload.index]);
      if (indexSet.size <= 0) {
        return;
      }
      return produce(value, function (draft) {
        var sortedItems = draft.filter(function (_, valueIndex) {
          return !indexSet.has(valueIndex);
        });
        return sortedItems;
      });
    case 'addItem':
      var item = payload.item,
        _payload$index = payload.index,
        index = _payload$index === void 0 ? value.length : _payload$index;
      return produce(value, function (draft) {
        draft.splice(index, 0, item);
        return draft;
      });
    case 'updateItem':
      return produce(value, function (draft) {
        var item = payload.item,
          index = payload.index;
        draft[index] = merge(draft[index], item);
        return draft;
      });
  }
};