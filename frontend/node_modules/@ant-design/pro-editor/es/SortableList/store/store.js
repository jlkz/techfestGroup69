import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import isEqual from 'lodash.isequal';
import { getIndexOfActiveItem } from "../utils";
import { initialState } from "./initialState";
import { keyManagerReducer } from "./keyManagerReducer";
import { listDataReducer } from "./listDataReducer";

// eslint-disable-next-line @typescript-eslint/no-empty-interface

var vanillaStore = function vanillaStore(set, get) {
  return _objectSpread(_objectSpread({}, initialState), {}, {
    handleDragStart: function handleDragStart(_ref) {
      var activeId = _ref.active.id;
      if (!activeId) {
        return;
      }
      set({
        activeId: activeId
      });
    },
    handleDragEnd: function handleDragEnd(_ref2) {
      var over = _ref2.over,
        active = _ref2.active;
      var _get = get(),
        dispatchListData = _get.dispatchListData,
        keyManager = _get.keyManager;
      if (over) {
        var activeIndex = getIndexOfActiveItem(keyManager, active.id);
        var overIndex = getIndexOfActiveItem(keyManager, over.id);
        dispatchListData({
          type: 'moveItem',
          activeIndex: activeIndex,
          overIndex: overIndex
        });
      }
      set({
        activeId: null
      });
    },
    handleDragCancel: function handleDragCancel() {
      set({
        activeId: null
      });
    },
    // ===== 更新 listData 方法 ======= //
    dispatchListData: function dispatchListData(payload) {
      var _get2 = get(),
        value = _get2.value,
        keyManager = _get2.keyManager,
        onChange = _get2.onChange;
      var data = listDataReducer(value, payload);
      // value 值变化的时候，keyManager 也需要变化
      var keys = keyManagerReducer(keyManager, payload);
      if (data) {
        if (isEqual(value, data)) return;
        set({
          value: data,
          keyManager: keys
        });
        if (onChange) onChange(data, payload);
      }
    }
  });
};
export default vanillaStore;