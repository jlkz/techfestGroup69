import { produce } from 'immer';
import { forwardRef, useImperativeHandle } from 'react';
import { createStoreUpdater } from 'zustand-utils';
import { useSortableList } from '..';
import { useStoreApi } from "../store";
import { getUUID } from "../utils";
var StoreUpdater = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var initialValues = _ref.initialValues,
    value = _ref.value,
    actions = _ref.actions,
    onChange = _ref.onChange,
    renderItem = _ref.renderItem,
    renderContent = _ref.renderContent,
    renderEmpty = _ref.renderEmpty,
    renderHeader = _ref.renderHeader,
    getItemStyles = _ref.getItemStyles,
    creatorButtonProps = _ref.creatorButtonProps,
    hideRemove = _ref.hideRemove,
    handle = _ref.handle;
  var storeApi = useStoreApi();
  var useStoreUpdater = createStoreUpdater(storeApi);

  // KeyManager 和 value & initialValues 同步。
  var KeyManagerUpdater = function KeyManagerUpdater(state, key) {
    var _storeApi$getState = storeApi.getState(),
      keyManager = _storeApi$getState.keyManager;
    // value 为空处理
    var value = state[key] || [];
    var manager = produce(keyManager, function (draft) {
      value.forEach(function (__, index) {
        var key = draft[index];
        if (key === undefined) {
          draft[index] = getUUID(index);
        }
      });
      return draft;
    });
    storeApi.setState({
      keyManager: manager,
      value: value
    });
  };
  useStoreUpdater('initialValues', initialValues, [], function (state) {
    KeyManagerUpdater(state, 'initialValues');
  });
  useStoreUpdater('value', value, [], function (state) {
    KeyManagerUpdater(state, 'value');
  });
  useStoreUpdater('actions', actions);
  useStoreUpdater('onChange', onChange);
  useStoreUpdater('renderItem', renderItem);
  useStoreUpdater('renderContent', renderContent);
  useStoreUpdater('renderEmpty', renderEmpty);
  useStoreUpdater('renderHeader', renderHeader);
  useStoreUpdater('getItemStyles', getItemStyles);
  useStoreUpdater('creatorButtonProps', creatorButtonProps);
  useStoreUpdater('hideRemove', hideRemove);
  useStoreUpdater('handle', handle);

  // 将 store 传递到外部
  var instance = useSortableList();
  useImperativeHandle(ref, function () {
    return instance;
  });
  return null;
});
export default StoreUpdater;