import { closestCenter, DndContext, KeyboardSensor, MeasuringStrategy, MouseSensor, TouchSensor, useSensor, useSensors } from '@dnd-kit/core';
import { createPortal } from 'react-dom';
import { restrictToVerticalAxis, restrictToWindowEdges } from '@dnd-kit/modifiers';
import { SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { useMemo } from 'react';
import { Flexbox } from 'react-layout-kit';
import { shallow } from 'zustand/shallow';
import { cx } from "../../theme";
import DragOverlay from "../features/DragOverlay";
import SortList from "../features/SortList";
import { useStore } from "../store";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var measuringConfig = {
  strategy: MeasuringStrategy.Always
};
var selector = function selector(s) {
  return {
    handleDragStart: s.handleDragStart,
    handleDragCancel: s.handleDragCancel,
    handleDragEnd: s.handleDragEnd,
    keyManager: s.keyManager,
    renderHeader: s.renderHeader
  };
};
var App = function App(_ref) {
  var className = _ref.className,
    style = _ref.style;
  var _useStore = useStore(selector, shallow),
    handleDragStart = _useStore.handleDragStart,
    handleDragCancel = _useStore.handleDragCancel,
    handleDragEnd = _useStore.handleDragEnd,
    keyManager = _useStore.keyManager,
    renderHeader = _useStore.renderHeader;
  var sensors = useSensors(useSensor(MouseSensor), useSensor(TouchSensor), useSensor(KeyboardSensor, {
    coordinateGetter: sortableKeyboardCoordinates
  }));
  var overlay = useMemo(function () {
    return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(DragOverlay, {}), document.body);
  }, []);
  return /*#__PURE__*/_jsx(Flexbox, {
    className: cx(className),
    style: style,
    children: /*#__PURE__*/_jsx(DndContext, {
      sensors: sensors,
      collisionDetection: closestCenter // 碰撞检测策略
      ,
      onDragStart: handleDragStart,
      onDragEnd: handleDragEnd,
      measuring: {
        droppable: measuringConfig
      },
      onDragCancel: handleDragCancel,
      modifiers: [restrictToVerticalAxis, restrictToWindowEdges],
      children: /*#__PURE__*/_jsxs(SortableContext, {
        items: keyManager,
        strategy: verticalListSortingStrategy,
        children: [renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader(), /*#__PURE__*/_jsx(SortList, {}), overlay]
      })
    })
  });
};
export default App;