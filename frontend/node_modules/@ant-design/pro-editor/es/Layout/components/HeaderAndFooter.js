import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import ActionIcon from "../../ActionIcon";
import { MenuUnfoldOutlined } from '@ant-design/icons';
import { Dropdown, Flex } from 'antd';
import { useStyle } from "./../style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var typeEnum = /*#__PURE__*/function (typeEnum) {
  typeEnum["header"] = "header";
  typeEnum["footer"] = "footer";
  return typeEnum;
}(typeEnum || {});
var HeaderAndFooter = function HeaderAndFooter(props) {
  var _ref = props || {},
    children = _ref.children,
    render = _ref.render,
    _ref$hide = _ref.hide,
    hide = _ref$hide === void 0 ? false : _ref$hide,
    _ref$flex = _ref.flex,
    flex = _ref$flex === void 0 ? {
      justify: 'space-between',
      align: 'center',
      className: ''
    } : _ref$flex,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'header' : _ref$type,
    extra = _ref.extra,
    _ref$iconConfig = _ref.iconConfig,
    iconConfig = _ref$iconConfig === void 0 ? {
      icon: /*#__PURE__*/_jsx(MenuUnfoldOutlined, {}),
      dropdown: undefined,
      title: '',
      render: render
    } : _ref$iconConfig,
    themeType = _ref.themeType,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? {} : _ref$style,
    className = _ref.className;
  var _useStyle = useStyle({
      themeType: themeType
    }),
    styles = _useStyle.styles,
    cx = _useStyle.cx;
  if (hide) {
    return null;
  }
  if (render) {
    return render(props);
  }
  var IconDom = function IconDom() {
    if (iconConfig === false) return null;
    var _ref2 = iconConfig || {},
      icon = _ref2.icon,
      dropdown = _ref2.dropdown,
      title = _ref2.title,
      render = _ref2.render;
    if (!dropdown) return /*#__PURE__*/_jsxs("div", {
      className: styles.headerAndFooterIcon,
      children: [/*#__PURE__*/_jsx(ActionIcon, {
        icon: icon
      }), title]
    });
    var DefalutIconDom = /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsx(Dropdown, _objectSpread(_objectSpread({
        trigger: ['click'],
        placement: type === typeEnum.header ? 'bottomLeft' : 'topLeft'
      }, iconConfig.dropdown), {}, {
        children: /*#__PURE__*/_jsx(ActionIcon, {
          icon: icon
        })
      })), title]
    });
    if (render) {
      return render(iconConfig, DefalutIconDom);
    }
    return DefalutIconDom;
  };
  return /*#__PURE__*/_jsxs(Flex, _objectSpread(_objectSpread({}, flex), {}, {
    className: cx(type === typeEnum.header ? styles.header : styles.footer, styles.flexContainer, flex === null || flex === void 0 ? void 0 : flex.className, className),
    style: style,
    children: [/*#__PURE__*/_jsx("div", {
      className: styles.headerAndFooterCenterChildren,
      children: children
    }), /*#__PURE__*/_jsx("div", {
      className: styles.headerAndFooterIcon,
      children: /*#__PURE__*/_jsx(IconDom, {})
    }), extra && /*#__PURE__*/_jsx("div", {
      className: styles.headerAndFooterExtra,
      children: extra
    })]
  }), type === typeEnum.header ? 'editor-layout-header' : 'editor-layout-footer');
};
export { HeaderAndFooter };