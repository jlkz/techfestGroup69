/// <reference types="react" />
import type { ContainerNode, InteractStatus } from '../type';
import type { InteractModel } from './InteractModel';
interface StatusHandleClick {
    type: 'handleClick';
    target: Element;
}
interface StatusHandleContainerClick {
    type: 'handleContainerClick';
    target?: ContainerNode;
}
interface StatusHandleHover {
    type: 'handleHover';
    target?: Element;
    action: 'hover' | 'unhover';
}
export type StatusDispatch = StatusHandleClick | StatusHandleContainerClick | StatusHandleHover;
interface ControlledValueOption {
    value?: InteractStatus;
    onChange?: (value: InteractStatus) => void;
}
export declare const useInteractStatus: (interactModel: InteractModel, option?: ControlledValueOption) => {
    status: InteractStatus;
    dispatchStatus: import("react").Dispatch<StatusDispatch>;
};
export type UseInteractStatus = ReturnType<typeof useInteractStatus>;
export {};
