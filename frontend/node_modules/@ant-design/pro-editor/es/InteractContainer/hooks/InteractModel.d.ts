import type { CanvasInteractModel, CanvasInteractRule, ContainerNode, InteractionType, InteractStatus } from '../type';
export declare class InteractModel {
    rules: CanvasInteractRule[];
    models: CanvasInteractModel[];
    container: ContainerNode;
    constructor(rules: any, container?: ContainerNode);
    get totalValidElements(): number;
    /**
     * 初始化模型
     */
    initModels(): void;
    /**
     * 获取规则与元素索引值
     * @param element
     */
    getRuleAndIndexByElement(element: Element): any;
    /**
     * 获取所有的支持hover的元素
     */
    getHoverElements(): Element[];
    /**
     * 获取所有的支持点击的元素
     */
    getClickElements(): Element[];
    /**
     * 获取匹配的元素类型
     * @param action
     */
    getMatchedElements(action?: InteractionType): Element[];
    /**
     * 根据 status 值找到元素
     */
    getElementByStatus(status: InteractStatus): HTMLElement;
    /**
     * 获取规则匹配的所有元素
     */
    static getValidElements(rule: CanvasInteractRule, container?: ContainerNode): Element[];
    /**
     * 使用三重选择器做判断
     * @param container
     * @param selector
     * @private
     */
    static querySelector(selector: string, container?: Document | Element): NodeListOf<Element>;
    /**
     * 判断是否匹配容器本身
     * @param rule
     */
    isMatchContainer(rule: CanvasInteractRule): boolean;
    initListener: (ele: Element[] | ContainerNode, type: keyof GlobalEventHandlersEventMap, method: any) => {
        register: () => void;
        unRegister: () => void;
    };
    getClickListeners(onClick: any): {
        register: () => void;
        unRegister: () => void;
    };
    getHoverListeners(onHover: any, onUnhover: any): {
        register: () => void;
        unRegister: () => void;
    };
    /**
     * 将相应的一些交互事件监听方法进行注册
     * @param click
     * @param hover
     */
    getInteractListeners({ click, hover, }: {
        click: any;
        hover: {
            onHoverStart: any;
            onHoverEnd: any;
        };
    }): {
        register: () => void;
        unRegister: () => void;
    };
}
