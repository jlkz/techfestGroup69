import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import isEqual from 'lodash.isequal';
/**
 * 约定标识符
 */
var SELECTOR_IDENTIFIERS = ['data-uxid', 'data-testid'];
export var InteractModel = /*#__PURE__*/function () {
  function InteractModel(rules) {
    var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    _classCallCheck(this, InteractModel);
    _defineProperty(this, "rules", void 0);
    _defineProperty(this, "models", void 0);
    _defineProperty(this, "container", void 0);
    _defineProperty(this, "initListener", function (ele, type, method) {
      if (ele instanceof Array) {
        return {
          register: function register() {
            ele.forEach(function (e) {
              e.addEventListener(type, method);
            });
          },
          unRegister: function unRegister() {
            ele.forEach(function (e) {
              e.removeEventListener(type, method);
            });
          }
        };
      } else {
        return {
          register: function register() {
            return ele.addEventListener(type, method);
          },
          unRegister: function unRegister() {
            return ele.removeEventListener(type, method);
          }
        };
      }
    });
    this.rules = rules;
    this.container = container;
    this.initModels();
  }
  _createClass(InteractModel, [{
    key: "totalValidElements",
    get: function get() {
      return this.getMatchedElements().length;
    }

    /**
     * 初始化模型
     */
  }, {
    key: "initModels",
    value: function initModels() {
      var _this = this;
      this.models = this.rules.map(function (r) {
        return _objectSpread(_objectSpread({}, r), {}, {
          elements: InteractModel.getValidElements(r, _this.container),
          containerMatched: _this.isMatchContainer(r)
        });
      });
    }

    /**
     * 获取规则与元素索引值
     * @param element
     */
  }, {
    key: "getRuleAndIndexByElement",
    value: function getRuleAndIndexByElement(element) {
      var index = -1;
      var ruleIndex = this.models.findIndex(function (r) {
        var i = r.elements.findIndex(function (e) {
          return isEqual(e, element);
        });
        if (i > -1) {
          index = i;
        }
        return i > -1;
      });
      var rule = this.rules[ruleIndex];
      if (rule) return {
        index: index,
        rule: rule
      };
      if (element.parentElement) return this.getRuleAndIndexByElement(element.parentElement);
    }

    /**
     * 获取所有的支持hover的元素
     */
  }, {
    key: "getHoverElements",
    value: function getHoverElements() {
      return this.getMatchedElements('hover');
    }

    /**
     * 获取所有的支持点击的元素
     */
  }, {
    key: "getClickElements",
    value: function getClickElements() {
      return this.getMatchedElements('click');
    }

    /**
     * 获取匹配的元素类型
     * @param action
     */
  }, {
    key: "getMatchedElements",
    value: function getMatchedElements(action) {
      return this.models.filter(function (i) {
        return !action ? i : i.actions.includes(action);
      }).map(function (e) {
        return e.elements;
      }).flat().filter(function (o) {
        return o;
      });
    }

    /**
     * 根据 status 值找到元素
     */
  }, {
    key: "getElementByStatus",
    value: function getElementByStatus(status) {
      var _status$currentNode;
      var node = (_status$currentNode = status.currentNode) !== null && _status$currentNode !== void 0 ? _status$currentNode : status.activeNode;
      if (!node) return;
      var rule = node.rule,
        index = node.index;
      var model = this.models.find(function (m) {
        return m.id === rule.id && m.actions.includes(status.action);
      });
      if (!model) return;
      return model.elements[index];
    }

    /**
     * 获取规则匹配的所有元素
     */
  }, {
    key: "isMatchContainer",
    value:
    /**
     * 判断是否匹配容器本身
     * @param rule
     */
    function isMatchContainer(rule) {
      if (isEqual(this.container, document)) return false;
      return rule.selectors.some(function (s) {
        var array = InteractModel.querySelector(s);
        return array.length > 0;
      });
    }
  }, {
    key: "getClickListeners",
    value: function getClickListeners(onClick) {
      var elements = this.getClickElements();
      return this.initListener(elements, 'click', onClick);
    }
  }, {
    key: "getHoverListeners",
    value: function getHoverListeners(onHover, onUnhover) {
      var elements = this.getHoverElements();
      var hoverFn = this.initListener(elements, 'mouseenter', onHover);
      var unhoverFn = this.initListener(elements, 'mouseleave', onUnhover);
      return {
        register: function register() {
          hoverFn.register();
          unhoverFn.register();
        },
        unRegister: function unRegister() {
          hoverFn.unRegister();
          unhoverFn.unRegister();
        }
      };
    }

    /**
     * 将相应的一些交互事件监听方法进行注册
     * @param click
     * @param hover
     */
  }, {
    key: "getInteractListeners",
    value: function getInteractListeners(_ref) {
      var click = _ref.click,
        hover = _ref.hover;
      var clickFn = this.getClickListeners(click);
      var hoverFn = this.getHoverListeners(hover.onHoverStart, hover.onHoverEnd);
      return {
        register: function register() {
          clickFn.register();
          hoverFn.register();
        },
        unRegister: function unRegister() {
          clickFn.unRegister();
          hoverFn.unRegister();
        }
      };
    }
  }], [{
    key: "getValidElements",
    value: function getValidElements(rule) {
      var _this2 = this;
      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
      return rule.selectors.map(function (s) {
        return _this2.querySelector(s, container);
      }).map(function (i) {
        return Array.from(i.values());
      }).flat();
    }

    /**
     * 使用三重选择器做判断
     * @param container
     * @param selector
     * @private
     */
  }, {
    key: "querySelector",
    value: function querySelector(selector) {
      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
      // 先用约定标识符
      for (var _i = 0, _SELECTOR_IDENTIFIERS = SELECTOR_IDENTIFIERS; _i < _SELECTOR_IDENTIFIERS.length; _i++) {
        var id = _SELECTOR_IDENTIFIERS[_i];
        var eles = container.querySelectorAll("[".concat(id, "=\"").concat(selector, "\"]"));
        if (eles.length > 0) return eles;
      }

      // 再用 css 选择器
      return container.querySelectorAll(selector);
    }
  }]);
  return InteractModel;
}();