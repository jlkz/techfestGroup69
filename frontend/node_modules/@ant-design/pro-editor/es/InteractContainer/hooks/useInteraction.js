import { useEffect } from 'react';
import { initListener } from "../utils";
/**
 * 控制画布交互
 */
export var useInteraction = function useInteraction(_ref) {
  var interactModel = _ref.interactModel,
    container = _ref.container,
    dispatchStatus = _ref.dispatchStatus,
    disabled = _ref.disabled;
  var onContainerClick = function onContainerClick(e) {
    dispatchStatus({
      type: 'handleContainerClick',
      target: e.target
    });
  };
  var onClick = function onClick(e) {
    e.stopPropagation();
    dispatchStatus({
      type: 'handleClick',
      target: e.target
    });
  };
  var onHoverStart = function onHoverStart(e) {
    dispatchStatus({
      type: 'handleHover',
      target: e.target,
      action: 'hover'
    });
  };
  var onHoverEnd = function onHoverEnd() {
    dispatchStatus({
      type: 'handleHover',
      action: 'unhover'
    });
  };

  // 注册监听事件
  // 当元素数量发生变动时，需要重新进行事件注册
  useEffect(function () {
    if (disabled) return;
    if (interactModel.totalValidElements === 0) return;
    var listeners = interactModel.getInteractListeners({
      click: onClick,
      hover: {
        onHoverStart: onHoverStart,
        onHoverEnd: onHoverEnd
      }
    });
    listeners.register();
    return function () {
      listeners.unRegister();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [disabled, interactModel.totalValidElements]);

  // 加入容器控制
  useEffect(function () {
    if (disabled) return;
    if (!container) return;
    var _initListener = initListener(container, 'click', onContainerClick),
      unRegister = _initListener.unRegister,
      register = _initListener.register;
    register();
    return function () {
      unRegister();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [disabled, container]);
  return {
    onClick: onClick
  };
};