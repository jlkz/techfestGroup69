import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import isEqual from 'lodash.isequal';
import { useEffect, useReducer } from 'react';
export var useInteractStatus = function useInteractStatus(interactModel) {
  var _option$value2;
  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var statusReducer = function statusReducer(state, payload) {
    var _option$value;
    var status = (_option$value = option === null || option === void 0 ? void 0 : option.value) !== null && _option$value !== void 0 ? _option$value : state;
    switch (payload.type) {
      // 处理容器的点击操作
      case 'handleContainerClick':
        return {
          status: 'unSelected',
          action: 'click'
        };

      // 处理 元素本身的点击状态
      case 'handleClick':
        var currentNode = interactModel.getRuleAndIndexByElement(payload.target);
        var isActive = status && !!status.activeNode;

        // 如果两个元素相同的情况下
        if (status && isEqual(currentNode, status.activeNode)) {
          return {
            status: isActive ? 'unSelected' : 'selected',
            action: 'click',
            currentNode: isActive ? undefined : currentNode,
            activeNode: isActive ? undefined : currentNode
          };
        }

        // 如果两个元素不同，那么选中新元素
        return {
          status: 'selected',
          currentNode: currentNode,
          activeNode: currentNode,
          action: 'click'
        };

      // 处理 hover 状态
      case 'handleHover':
        var node = payload.target && interactModel.getRuleAndIndexByElement(payload.target);
        return _objectSpread(_objectSpread({}, status), {}, {
          status: payload.action,
          action: 'hover',
          currentNode: node
        });
      default:
        return status;
    }
  };
  var _useReducer = useReducer(statusReducer, option === null || option === void 0 ? void 0 : option.value),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    status = _useReducer2[0],
    dispatchStatus = _useReducer2[1];
  useEffect(function () {
    if (option !== null && option !== void 0 && option.onChange) {
      option.onChange(status);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [status]);
  return {
    status: (_option$value2 = option === null || option === void 0 ? void 0 : option.value) !== null && _option$value2 !== void 0 ? _option$value2 : status,
    dispatchStatus: dispatchStatus
  };
};