import isEqual from 'lodash.isequal';
import { useRef } from 'react';
import { createStyles } from "../../theme";
var useStyle = createStyles(function (_ref) {
  var token = _ref.token,
    prefixCls = _ref.prefixCls;
  var componentPrefix = "".concat(prefixCls, "-").concat(token.editorPrefix, "-context-canvas");
  return {
    componentPrefix: componentPrefix
  };
});
export var useRender = function useRender() {
  var _useStyle = useStyle(),
    styles = _useStyle.styles;
  var selectItem = useRef();
  var hoverItem = useRef();
  var isSelected = function isSelected() {
    return !!selectItem.current;
  };

  /*工具方法*/

  var addClass = function addClass(element, action) {
    if (!element) return;
    element.classList.add("".concat(styles.componentPrefix, "-").concat(action));
  };
  var removeClass = function removeClass(element, action) {
    if (!element) return;
    element.classList.remove("".concat(styles.componentPrefix, "-").concat(action));
  };
  var removeAllClass = function removeAllClass(action) {
    removeClass(selectItem.current, action);
    removeClass(hoverItem.current, action);
  };

  /* 渲染方法 */

  var renderSelected = function renderSelected(element) {
    selectItem.current = element;
    addClass(element, 'click');
    removeClass(element, 'hover');
  };
  var renderUnselected = function renderUnselected(element) {
    removeClass(element, 'click');
    removeClass(element, 'hover');
    if (isEqual(element, selectItem.current)) {
      selectItem.current = null;
    }
  };
  var renderUnselectedAll = function renderUnselectedAll() {
    removeClass(selectItem.current, 'click');
    removeClass(selectItem.current, 'hover');
    selectItem.current = null;
  };
  var renderHover = function renderHover(element) {
    addClass(element, 'hover');
    hoverItem.current = element;
  };
  var renderUnHover = function renderUnHover() {
    removeAllClass('hover');
    hoverItem.current = null;
  };
  return {
    renderSelected: renderSelected,
    renderUnselected: renderUnselected,
    renderHover: renderHover,
    renderUnHover: renderUnHover,
    renderUnselectedAll: renderUnselectedAll,
    currentSelectedElementRef: selectItem,
    isSelected: isSelected
  };
};