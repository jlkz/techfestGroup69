import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
/**
 * 提供给用户的配置项
 */

var middleware = function middleware(storeInitializer, options) {
  return function (set, get, api) {
    var _options$partialize;
    var partialize = (_options$partialize = options.partialize) !== null && _options$partialize !== void 0 ? _options$partialize : function (s) {
      return s;
    };
    var configKey = options.name;

    /**
     * 记录历史
     * @param action
     */
    var updateInProEditor = function updateInProEditor(action) {
      var nextConfig = partialize(get());
      var _ref = get(),
        proEditor = _ref.proEditor;
      proEditor.__INTERNAL_SET_CONFIG__NOT_USE_IT(_defineProperty({}, configKey, nextConfig), _objectSpread({
        trigger: 'proEditorMiddleware'
      }, action));
    };

    /**
     * handle setState function
     */
    var savedSetState = api.setState;
    api.setState = function (partial, replace, action) {
      savedSetState(partial, replace, action);
      updateInProEditor(action || {});
    };

    /*
     * Capture the initial state so that we can initialize the pro editor store to the
     * same values as the initial values of the Zustand store.
     */
    var store = storeInitializer(
    /*
     * Create a new set function that defers to the original and then passes
     * the new state to patchSharedType.
     */
    function (partial, replace, action) {
      set(partial, replace, action);
      updateInProEditor(action || {});
    }, get, api);

    // Return the initial state to create or the next middleware.
    return _objectSpread(_objectSpread({}, store), {}, {
      proEditor: {
        options: _objectSpread(_objectSpread({}, options), {}, {
          partialize: partialize
        })
      }
    });
  };
};
export var proEditorMiddleware = middleware;