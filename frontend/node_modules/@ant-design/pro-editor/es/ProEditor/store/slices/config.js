import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import isEqual from 'fast-deep-equal';
import merge from 'lodash.merge';
import { DocWithHistoryManager } from "../../utils/yjs";

// ======== state ======== //

// ======== action ======== //

/**
 * 公共配置操作接口
 */

export var configSlice = function configSlice(set, get) {
  var initialConfigState = {
    // 文件配置属性
    config: null,
    onConfigChange: null,
    props: {},
    yjsDoc: new DocWithHistoryManager()
  };
  return _objectSpread(_objectSpread({}, initialConfigState), {}, {
    resetConfig: function resetConfig() {
      set({
        config: initialConfigState.config,
        props: initialConfigState.props
      });
    },
    /**
     * 内部修改 config 方法
     * 传给 ProTableStore 进行 config 同步
     */
    internalUpdateConfig: function internalUpdateConfig(config, payload, replace) {
      var _get = get(),
        onConfigChange = _get.onConfigChange,
        configToProps = _get.configToProps;
      var nextConfig = replace ? config : _objectSpread(_objectSpread({}, get().config), config);
      set({
        config: nextConfig
      }, false, payload);
      onConfigChange === null || onConfigChange === void 0 || onConfigChange({
        config: nextConfig,
        props: configToProps === null || configToProps === void 0 ? void 0 : configToProps(nextConfig)
      });
    },
    exportConfig: function exportConfig() {
      var eleLink = document.createElement('a');
      eleLink.download = 'pro-edior-config.json';
      eleLink.style.display = 'none';
      var blob = new Blob([JSON.stringify(get().config)]);
      eleLink.href = URL.createObjectURL(blob);
      document.body.appendChild(eleLink);
      eleLink.click();
      document.body.removeChild(eleLink);
    },
    setConfig: function setConfig(config) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (isEqual(config, get().config)) return;
      var replace = options.replace,
        recordHistory = options.recordHistory,
        name = options.name,
        type = options.type,
        trigger = options.trigger;
      get().internalUpdateConfig(config, {
        type: "setConfig/".concat(trigger || 'unknown'),
        payload: {
          config: config,
          options: options
        }
      }, replace);
      var useAction = merge({}, {
        recordHistory: true
      }, {
        recordHistory: recordHistory,
        name: name,
        type: type
      });
      if (useAction.recordHistory) {
        get().yjsDoc.recordHistoryData({
          config: config
        }, _objectSpread(_objectSpread({}, useAction), {}, {
          timestamp: Date.now()
        }));
      }
    }
  });
};