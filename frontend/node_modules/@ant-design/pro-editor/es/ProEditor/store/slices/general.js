/**
 * 通用公共动作
 */

var mapUndoManagerStackToUserStack = function mapUndoManagerStackToUserStack(stack) {
  return stack.map(function (i) {
    return {
      name: i.meta.get('name'),
      timestamp: i.meta.get('timestamp'),
      type: i.meta.get('type')
    };
  });
};
export var generalSlice = function generalSlice(set, get) {
  return {
    undoStack: function undoStack() {
      return mapUndoManagerStackToUserStack(get().yjsDoc.undoManager.undoStack);
    },
    redoStack: function redoStack() {
      return mapUndoManagerStackToUserStack(get().yjsDoc.undoManager.redoStack);
    },
    undoLength: function undoLength() {
      return get().yjsDoc.undoManager.undoStack.length;
    },
    redoLength: function redoLength() {
      return get().yjsDoc.undoManager.redoStack.length;
    },
    undo: function undo() {
      var _get = get(),
        yjsDoc = _get.yjsDoc,
        internalUpdateConfig = _get.internalUpdateConfig;
      var stack = yjsDoc.undo();
      var _yjsDoc$getHistoryJSO = yjsDoc.getHistoryJSON(),
        config = _yjsDoc$getHistoryJSO.config;
      internalUpdateConfig(config, {
        type: 'history/undo',
        payload: stack
      }, true);
    },
    redo: function redo() {
      var _get2 = get(),
        yjsDoc = _get2.yjsDoc,
        internalUpdateConfig = _get2.internalUpdateConfig;
      var stack = yjsDoc.redo();
      var _yjsDoc$getHistoryJSO2 = yjsDoc.getHistoryJSON(),
        config = _yjsDoc$getHistoryJSO2.config;
      internalUpdateConfig(config, {
        type: 'history/redo',
        payload: stack
      }, true);
    }
  };
};