/// <reference types="react" />
import { StoreApi } from 'zustand';
import { InternalProEditorStore, createStore } from './createStore';
declare const Provider: ({ createStore, children }: {
    createStore: () => StoreApi<InternalProEditorStore>;
    children: import("react").ReactNode;
}) => import("react").FunctionComponentElement<import("react").ProviderProps<StoreApi<InternalProEditorStore>>>, useStore: import("zustand-utils").UseContextStore<StoreApi<InternalProEditorStore>>, useStoreApi: () => {
    setState: (partial: InternalProEditorStore | Partial<InternalProEditorStore> | ((state: InternalProEditorStore) => InternalProEditorStore | Partial<InternalProEditorStore>), replace?: boolean) => void;
    getState: () => InternalProEditorStore;
    getInitialState: () => InternalProEditorStore;
    subscribe: (listener: (state: InternalProEditorStore, prevState: InternalProEditorStore) => void) => () => void;
    destroy: () => void;
};
export { Provider, createStore, useStore, useStoreApi };
export type { InternalProEditorStore, ProEditorState } from './createStore';
