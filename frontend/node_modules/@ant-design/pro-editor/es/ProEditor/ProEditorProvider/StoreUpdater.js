import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import isEqual from 'fast-deep-equal';
import { produce } from 'immer';
import { memo, useCallback, useEffect } from 'react';
import { createStoreUpdater, storeApiSetState } from 'zustand-utils';
import { useStoreApi } from "../store";
var StoreUpdater = /*#__PURE__*/memo(function (_ref) {
  var store = _ref.store;
  var _store$getState = store.getState(),
    proEditor = _store$getState.proEditor;

  // =============== 前置校验 =============== //
  // 1. 包裹 proEditorMiddleware 2. 包裹 ProEditorProvider
  if (!proEditor) {
    throw Error('please wrapper your zustand store with proEditorMiddleware');
  }
  try {
    useStoreApi();
  } catch (e) {
    throw Error('Please wrap your App with <ProEditorProvider/>');
  }
  var storeApi = useStoreApi();
  var _storeApi$getState = storeApi.getState(),
    yjsDoc = _storeApi$getState.yjsDoc,
    setConfig = _storeApi$getState.setConfig;
  var configKey = proEditor.options.name;
  var getProEditorConfig = function getProEditorConfig() {
    return proEditor.options.partialize(store.getState());
  };
  var isEqualConfig = function isEqualConfig() {
    var _storeApi$getState$co;
    var config = getProEditorConfig();
    return isEqual(config, (_storeApi$getState$co = storeApi.getState().config) === null || _storeApi$getState$co === void 0 ? void 0 : _storeApi$getState$co[configKey]);
  };

  // 将应用层的 store 注入 config
  var config = getProEditorConfig();
  var useStoreUpdater = createStoreUpdater(storeApi);
  useStoreUpdater('config', _defineProperty({}, configKey, config), [config], function (partialNewState) {
    if (isEqualConfig()) return;
    storeApiSetState(storeApi, partialNewState, false, {
      type: "\u2935\uFE0F syncData from ".concat(configKey),
      payload: {
        config: config,
        name: configKey
      }
    });
    yjsDoc.updateHistoryData(partialNewState);
  });

  // TODO: 可以看下是否拆成独立的onRedoUndoChange
  useStoreUpdater('onConfigChange', function (value) {
    var config = value.config[configKey];
    var prevConfig = getProEditorConfig();
    if (isEqual(prevConfig, config)) return;
    store.setState(config, false,
    // @ts-ignore
    {
      type: 'ProEditor/updateByRedoOrUndo',
      payload: config
    });
  }, []);

  // =============== 注入与中间件联动的方法

  var updateConfig = useCallback(function () {
    if (isEqualConfig()) return;
    setConfig.apply(void 0, arguments);
  }, []);
  useEffect(function () {
    store.setState(produce(function (draft) {
      draft.proEditor.__INTERNAL_SET_CONFIG__NOT_USE_IT = updateConfig;
    }), false,
    // @ts-ignore
    'injectProEditor');
  }, []);
  return null;
});
export default StoreUpdater;