import { createStore as _createStore, Provider, useStoreApi } from "../store";
import StoreUpdater from "./StoreUpdater";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export var ProEditorProvider = function ProEditorProvider(_ref) {
  var children = _ref.children,
    devtoolOptions = _ref.devtoolOptions,
    store = _ref.store;
  var isWrapped = true;
  var Content = /*#__PURE__*/_jsxs(_Fragment, {
    children: [children, store === null || store === void 0 ? void 0 : store.map(function (item, index) {
      return /*#__PURE__*/_jsx(StoreUpdater, {
        store: item
      }, "".concat(item.name, "-").concat(index));
    })]
  });
  try {
    useStoreApi();
  } catch (e) {
    isWrapped = false;
  }
  /* istanbul ignore if */
  if (isWrapped) {
    return Content;
  }
  return /*#__PURE__*/_jsx(Provider, {
    createStore: function createStore() {
      return _createStore(devtoolOptions);
    },
    children: Content
  });
};