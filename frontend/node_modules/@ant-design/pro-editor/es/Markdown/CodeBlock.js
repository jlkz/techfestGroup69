import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
var _templateObject, _templateObject2;
import { createStyles } from 'antd-style';
import { memo } from 'react';
import { Highlight, Snippet } from "./..";
import { jsx as _jsx } from "react/jsx-runtime";
var useStyles = createStyles(function (_ref) {
  var css = _ref.css;
  return {
    container: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    :not(:last-child) {\n      margin-block-start: 1em;\n      margin-block-end: 1em;\n      margin-inline-start: 0;\n      margin-inline-end: 0;\n    }\n  "]))),
    highlight: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    pre {\n      padding: 12px !important;\n    }\n  "])))
  };
});
var countLines = function countLines(str) {
  var regex = /\n/g;
  var matches = str.match(regex);
  return matches ? matches.length : 1;
};
export var Code = /*#__PURE__*/memo(function (properties) {
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  if (!properties.children[0]) return;
  var _properties$children$ = properties.children[0].props,
    children = _properties$children$.children,
    className = _properties$children$.className;
  if (!children) return;
  var content = Array.isArray(children) ? children[0] : children;
  var lang = (className === null || className === void 0 ? void 0 : className.replace('language-', '')) || 'txt';
  if (countLines(content) === 1 && content.length <= 60) {
    return /*#__PURE__*/_jsx(Snippet, {
      className: cx(styles.container),
      style: {
        display: 'flex'
      },
      "data-code-type": "highlighter",
      language: lang,
      symbol: '',
      type: 'block',
      children: content
    });
  }
  return /*#__PURE__*/_jsx(Highlight, {
    className: cx(styles.container, styles.highlight),
    language: lang,
    type: "block",
    containerWrapper: true,
    children: content
  });
});