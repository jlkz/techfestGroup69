import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { closestCenter, DndContext, KeyboardSensor, MeasuringStrategy, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';
import isEqual from 'fast-deep-equal';
import { memo, useEffect, useMemo, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { Flexbox } from 'react-layout-kit';
import { shallow } from 'zustand/shallow';
import { sortableTreeKeyboardCoordinates } from "../keyboardCoordinates";
import { dataFlattenSelector, sortedIdsSelector, useStore } from "../store";
import DragOverlay from "../features/DragOverlay";
import SortableList from "../features/TreeList";
import { useStyles } from "../style";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var measuring = {
  droppable: {
    strategy: MeasuringStrategy.Always
  }
};
var App = /*#__PURE__*/memo(function (_ref) {
  var className = _ref.className,
    rootClassName = _ref.rootClassName,
    style = _ref.style;
  var _useStore = useStore(function (s) {
      return [s.offsetLeft, s.handleDragStart, s.handleDragCancel, s.handleDragEnd, s.handleDragMove, s.indentationWidth, s.handleDragOver];
    }, shallow),
    _useStore2 = _slicedToArray(_useStore, 7),
    offsetLeft = _useStore2[0],
    handleDragStart = _useStore2[1],
    handleDragCancel = _useStore2[2],
    handleDragEnd = _useStore2[3],
    handleDragMove = _useStore2[4],
    indentationWidth = _useStore2[5],
    handleDragOver = _useStore2[6];
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var flattenData = useStore(dataFlattenSelector, isEqual);
  var sensorContext = useRef({
    items: flattenData,
    offset: offsetLeft
  });
  useEffect(function () {
    sensorContext.current = {
      items: flattenData,
      offset: offsetLeft
    };
  }, [flattenData, offsetLeft]);
  var _useState = useState(function () {
      return sortableTreeKeyboardCoordinates(sensorContext, true, indentationWidth);
    }),
    _useState2 = _slicedToArray(_useState, 1),
    coordinateGetter = _useState2[0];
  var sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {
    coordinateGetter: coordinateGetter
  }));
  var sortedIds = useStore(sortedIdsSelector, isEqual);
  var overlay = useMemo(function () {
    return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(Flexbox, {
      className: cx(rootClassName, styles),
      children: /*#__PURE__*/_jsx(DragOverlay, {})
    }), document.body);
  }, []);
  return /*#__PURE__*/_jsx(Flexbox, {
    className: cx(className, rootClassName, styles),
    style: style,
    children: /*#__PURE__*/_jsx(DndContext, {
      sensors: sensors,
      collisionDetection: closestCenter,
      measuring: measuring,
      onDragStart: handleDragStart,
      onDragMove: handleDragMove,
      onDragOver: handleDragOver,
      onDragEnd: handleDragEnd,
      onDragCancel: handleDragCancel,
      children: /*#__PURE__*/_jsx(SortableContext, {
        items: sortedIds,
        strategy: verticalListSortingStrategy,
        children: /*#__PURE__*/_jsxs(_Fragment, {
          children: [/*#__PURE__*/_jsx(SortableList, {}), overlay]
        })
      })
    })
  });
});
export default App;