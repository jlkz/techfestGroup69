import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
var _excluded = ["depth", "index"],
  _excluded2 = ["parentId"];
import { produce } from 'immer';
var flatten = function flatten(items) {
  var parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return items.reduce(function (acc, item, index) {
    return [].concat(_toConsumableArray(acc), [_objectSpread(_objectSpread({}, item), {}, {
      parentId: parentId,
      depth: depth,
      index: index
    })], _toConsumableArray(flatten(item.children, item.id, depth + 1)));
  }, []);
};
export var flattenTree = function flattenTree(items) {
  return flatten(items);
};
export function buildTree(flattenedItems) {
  var root = {
    id: 'root',
    children: []
  };
  var nodes = _defineProperty({}, root.id, root);
  var items = flattenedItems.map(function (_ref) {
    var _item$parentId;
    var depth = _ref.depth,
      index = _ref.index,
      item = _objectWithoutProperties(_ref, _excluded);
    return _objectSpread(_objectSpread({}, item), {}, {
      parentId: (_item$parentId = item.parentId) !== null && _item$parentId !== void 0 ? _item$parentId : undefined,
      children: []
    });
  });
  var _iterator = _createForOfIteratorHelper(items),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _item$parentId2, _nodes$parentId;
      var item = _step.value;
      var id = item.id,
        children = item.children;
      var parentId = (_item$parentId2 = item.parentId) !== null && _item$parentId2 !== void 0 ? _item$parentId2 : root.id;
      var parent = (_nodes$parentId = nodes[parentId]) !== null && _nodes$parentId !== void 0 ? _nodes$parentId : findNode(items, parentId);
      nodes[id] = {
        id: id,
        children: children
      };
      var _ = item.parentId,
        newItem = _objectWithoutProperties(item, _excluded2);
      parent.children.push(newItem);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return root.children;
}
export function findNode(treeData, itemId) {
  return treeData.find(function (_ref2) {
    var id = _ref2.id;
    return id === itemId;
  });
}
export function removeNode(treeData, id) {
  var newItems = [];
  var _iterator2 = _createForOfIteratorHelper(treeData),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var item = _step2.value;
      item = Object.assign({}, item);
      if (item.id === id) {
        continue;
      }
      if (item.children.length) {
        item.children = removeNode(item.children, id);
      }
      newItems.push(item);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return newItems;
}
export var setProperty = function setProperty(treeData, id, property, setter) {
  return produce(treeData, function (draft) {
    var _iterator3 = _createForOfIteratorHelper(draft),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var item = _step3.value;
        if (item.id === id) {
          item[property] = setter(item[property]);
          continue;
        }
        if (item.children.length) {
          item.children = setProperty(item.children, id, property, setter);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  });
};