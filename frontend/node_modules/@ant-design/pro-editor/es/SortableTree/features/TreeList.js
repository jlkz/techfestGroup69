import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
var _templateObject;
import { createStyles, cx, getStudioStylish } from "../../theme";
import { useMemoizedFn } from 'ahooks';
import isEqual from 'lodash.isequal';
import { memo } from 'react';
import { VariableSizeList } from 'react-window';
import { shallow } from 'zustand/shallow';
import { SortableTreeItem } from "../components";
import { dataFlattenSelector, projectedSelector, useStore } from "../store";
import { genUniqueId } from "../../utils";
import { PlusOutlined } from '@ant-design/icons';
import { Button } from 'antd';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var TreeNode = /*#__PURE__*/memo(function (_ref) {
  var node = _ref.node,
    virtualStyle = _ref.virtualStyle;
  var _useStore = useStore(function (s) {
      return [s.activeId, s.indentationWidth, s.dispatchTreeData, s.hideRemove];
    }, shallow),
    _useStore2 = _slicedToArray(_useStore, 4),
    activeId = _useStore2[0],
    indentationWidth = _useStore2[1],
    dispatchTreeData = _useStore2[2],
    hideRemove = _useStore2[3];
  var projected = useStore(projectedSelector, shallow);
  var id = node.id,
    children = node.children,
    collapsed = node.collapsed,
    depth = node.depth;
  var onRemove = useMemoizedFn(function () {
    return dispatchTreeData({
      type: 'removeNode',
      id: id
    });
  });
  return /*#__PURE__*/_jsx(SortableTreeItem, {
    id: id,
    collapsed: Boolean(collapsed && children.length),
    indentationWidth: indentationWidth,
    depth: id === activeId && projected ? projected.depth : depth,
    hideRemove: hideRemove
    // 自定义渲染区
    ,

    showExtra: node.showExtra
    // 交互操作
    ,
    onCollapse: children.length ? function () {
      return dispatchTreeData({
        type: 'toggleCollapse',
        id: id
      });
    } : undefined,
    node: node,
    virtualStyle: virtualStyle,
    onRemove: onRemove
  });
}, isEqual);
var useStyle = createStyles(function (props) {
  var token = props.token,
    css = props.css,
    prefixCls = props.prefixCls;
  var common = getStudioStylish(props);
  var antCls = prefixCls;
  return {
    btnAdd: cx("".concat(antCls, "-btn-add"), css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        height: 24px;\n        padding-block: 2px;\n        margin-top: ", "px;\n      "])), token.marginXXS), common.defaultButton)
  };
});
var TreeList = /*#__PURE__*/memo(function () {
  var _useStore3 = useStore(function (s) {
      return [s.dispatchTreeData, s.hideAdd, s.virtual];
    }, shallow),
    _useStore4 = _slicedToArray(_useStore3, 3),
    dispatchTreeData = _useStore4[0],
    hideAdd = _useStore4[1],
    virtual = _useStore4[2];
  var flattenData = useStore(dataFlattenSelector, isEqual);
  var _useStyle = useStyle(),
    styles = _useStyle.styles;
  var _ref2 = virtual || {},
    _ref2$height = _ref2.height,
    height = _ref2$height === void 0 ? 800 : _ref2$height,
    _ref2$itemHeight = _ref2.itemHeight,
    itemHeight = _ref2$itemHeight === void 0 ? function () {
      return 36;
    } : _ref2$itemHeight,
    _ref2$width = _ref2.width,
    width = _ref2$width === void 0 ? '100%' : _ref2$width;
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [virtual ? /*#__PURE__*/_jsx(VariableSizeList, {
      itemCount: flattenData.length,
      height: height,
      itemSize: itemHeight,
      itemData: flattenData,
      width: width,
      children: function children(_ref3) {
        var index = _ref3.index,
          data = _ref3.data,
          style = _ref3.style;
        var node = data[index];
        return /*#__PURE__*/_jsx(TreeNode, {
          node: node,
          virtualStyle: style
        }, node.id);
      }
    }) : /*#__PURE__*/_jsx(_Fragment, {
      children: flattenData.map(function (node) {
        return /*#__PURE__*/_jsx(TreeNode, {
          node: node
        }, node.id);
      })
    }), hideAdd ? null : /*#__PURE__*/_jsx(Button, {
      block: true,
      size: 'small',
      className: styles.btnAdd,
      onClick: function onClick() {
        var index = flattenData.length + 1;
        dispatchTreeData({
          type: 'addNode',
          node: {
            id: genUniqueId(index.toString())
          }
        });
      },
      icon: /*#__PURE__*/_jsx(PlusOutlined, {}),
      children: "\u6DFB\u52A0\u4E00\u9879"
    })]
  });
});
export default TreeList;