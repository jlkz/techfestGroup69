import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { DragOverlay, defaultDropAnimation } from '@dnd-kit/core';
import { CSS } from '@dnd-kit/utilities';
import { memo } from 'react';
import { shallow } from 'zustand/shallow';
import { SortableTreeItem } from "../components";
import { useStore } from "../store";
import { getChildCount } from "../utils/utils";

// 拖拽时的动效
import { jsx as _jsx } from "react/jsx-runtime";
var dropAnimationConfig = {
  keyframes: function keyframes(_ref) {
    var transform = _ref.transform;
    return [{
      opacity: 1,
      transform: CSS.Transform.toString(transform.initial)
    }, {
      opacity: 0,
      transform: CSS.Transform.toString(_objectSpread(_objectSpread({}, transform.final), {}, {
        x: transform.final.x + 5,
        y: transform.final.y + 5
      }))
    }];
  },
  easing: 'ease-out',
  sideEffects: function sideEffects(_ref2) {
    var active = _ref2.active;
    active.node.animate([{
      opacity: 0
    }, {
      opacity: 1
    }], {
      duration: defaultDropAnimation.duration,
      easing: defaultDropAnimation.easing
    });
  }
};

// 可以用于控制 Overlay 的位置和尺寸
var adjustTranslate = function adjustTranslate(_ref3) {
  var transform = _ref3.transform;
  return _objectSpread(_objectSpread({}, transform), {}, {
    x: transform.x + 20,
    y: transform.y - 10
  });
};
var Overlay = function Overlay() {
  var _useStore = useStore(function (s) {
      return [s.activeId, s.treeData, s.indentationWidth, s.getActiveNode];
    }, shallow),
    _useStore2 = _slicedToArray(_useStore, 4),
    activeId = _useStore2[0],
    treeData = _useStore2[1],
    indentationWidth = _useStore2[2],
    getActiveNode = _useStore2[3];
  var activeItem = getActiveNode();
  return /*#__PURE__*/_jsx(DragOverlay, {
    dropAnimation: dropAnimationConfig,
    modifiers: [adjustTranslate],
    children: activeId && activeItem ? /*#__PURE__*/_jsx(SortableTreeItem, {
      id: activeId,
      depth: activeItem.depth,
      clone: true,
      childCount: getChildCount(treeData, activeId) + 1,
      node: activeItem,
      indentationWidth: indentationWidth
    }) : null
  });
};
export default /*#__PURE__*/memo(Overlay);