import type { UniqueIdentifier } from '@dnd-kit/core';
import type { Projected, TreeData } from '../types';
import type { FlattenNode } from '../types';
interface AddNodeAction {
    type: 'addNode';
    node: Partial<FlattenNode>;
    index?: number;
}
interface MoveNodeAction {
    type: 'moveNode';
    /**
     * 当前节点id
     */
    activeId: UniqueIdentifier;
    /**
     * 目标节点id
     */
    targetId: UniqueIdentifier;
    projected: Projected;
}
interface RemoveNodeAction {
    type: 'removeNode';
    id: UniqueIdentifier;
}
interface UpdateNodeContentAction<T = any> {
    type: 'updateNodeContent';
    id: UniqueIdentifier;
    content: T;
}
interface ToggleCollapseAction {
    type: 'toggleCollapse';
    id: UniqueIdentifier;
}
interface ToggleExtraVisibleAction {
    type: 'toggleExtraVisible';
    id: UniqueIdentifier;
}
/**
 * 暴露给外部更新 TreeNode 的方法
 */
export type TreeNodeDispatchPayload = Omit<UpdateNodeContentAction, 'id'>;
/**
 * 内部的更新方法
 */
export type TreeDataDispatchPayload = ToggleCollapseAction | ToggleExtraVisibleAction | MoveNodeAction | AddNodeAction | RemoveNodeAction | UpdateNodeContentAction;
export declare const treeDataReducer: (treeData: TreeData, payload: TreeDataDispatchPayload) => TreeData;
export {};
