import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { getFlattenedData } from "../../utils/utils";
import { initialDragState } from "../initialState";
import { dataFlattenSelector, projectedSelector } from "../selectors";
export var dndSlice = function dndSlice(set, get) {
  return {
    //辅助方法
    getActiveNode: function getActiveNode() {
      var _get = get(),
        activeId = _get.activeId,
        treeData = _get.treeData;
      return activeId ? getFlattenedData(treeData, activeId).find(function (_ref) {
        var id = _ref.id;
        return id === activeId;
      }) : null;
    },
    resetState: function resetState() {
      set(_objectSpread({}, initialDragState));
      document.body.style.setProperty('cursor', '');
    },
    // ===== 拖拽相关方法 =====
    handleDragStart: function handleDragStart(_ref2) {
      var activeId = _ref2.active.id;
      set({
        activeId: activeId,
        overId: activeId
      });
      var activeNode = get().getActiveNode();
      if (activeNode) {
        set({
          currentPosition: {
            parentId: activeNode.parentId,
            overId: activeId
          }
        });
      }
      document.body.style.setProperty('cursor', 'move');
    },
    handleDragMove: function handleDragMove(_ref3) {
      var delta = _ref3.delta;
      set({
        offsetLeft: delta.x
      });
    },
    handleDragOver: function handleDragOver(_ref4) {
      var _over$id;
      var over = _ref4.over;
      set({
        overId: (_over$id = over === null || over === void 0 ? void 0 : over.id) !== null && _over$id !== void 0 ? _over$id : null
      });
    },
    handleDragEnd: function handleDragEnd(_ref5) {
      var active = _ref5.active,
        over = _ref5.over;
      var _get2 = get(),
        resetState = _get2.resetState,
        dispatchTreeData = _get2.dispatchTreeData,
        sortableRule = _get2.sortableRule;
      var dataFlatten = dataFlattenSelector(get());
      var activeNode = dataFlatten.find(function (i) {
        return i.id === active.id;
      });
      var targetNode = dataFlatten.find(function (i) {
        return i.id === over.id;
      });
      var projected = projectedSelector(get());
      var canSort = !sortableRule || (sortableRule === null || sortableRule === void 0 ? void 0 : sortableRule({
        activeNode: activeNode,
        targetNode: targetNode,
        projected: projected
      }));
      if (projected && over && canSort) {
        dispatchTreeData({
          type: 'moveNode',
          projected: projected,
          activeId: active.id,
          targetId: over.id
        });
      }
      resetState();
    },
    handleDragCancel: function handleDragCancel() {
      get().resetState();
    }
  };
};