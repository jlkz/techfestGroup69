import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { dataFlattenSelector } from "./..";
import produce from 'immer';
export var selectionSlice = function selectionSlice(set, get) {
  return {
    updateSelectedIds: function updateSelectedIds(selectedIds) {
      var _get$onSelectedIdsCha, _get;
      set({
        selectedIds: selectedIds
      });
      (_get$onSelectedIdsCha = (_get = get()).onSelectedIdsChange) === null || _get$onSelectedIdsCha === void 0 || _get$onSelectedIdsCha.call(_get, selectedIds);
    },
    /**
     * 更新选中的节点
     * 如果已经存在，那么啥也不干，如果不存在，则添加
     * @param id
     */
    toggleNode: function toggleNode(id) {
      var _get2 = get(),
        selectedIds = _get2.selectedIds;
      set(produce(function (s) {
        if (!selectedIds.includes(id)) {
          s.selectedIds.push(id);
        } else {
          s.selectedIds = selectedIds.filter(function (key) {
            return key !== id;
          });
        }
      }));
    },
    withKeyboardSelectNode: function withKeyboardSelectNode(e, id) {
      var _get3 = get(),
        multiSelectNode = _get3.multiSelectNode,
        rowSelectNode = _get3.rowSelectNode,
        selectedNode = _get3.selectedNode;
      // 按住 ctrl 单选
      if (e.metaKey) {
        multiSelectNode(id);
        return;
      }

      // 按住 shift 时批量选择
      if (e.shiftKey) {
        rowSelectNode(id);
        return;
      }

      // 单选
      selectedNode(id);
    },
    rowSelectNode: function rowSelectNode(id) {
      var _get4 = get(),
        selectedIds = _get4.selectedIds,
        updateSelectedIds = _get4.updateSelectedIds;
      // 当前选区中没有元素
      if (selectedIds.length === 0) {
        updateSelectedIds([id]);
        return;
      }
      var dataFlatten = dataFlattenSelector(get());
      var currentIndex = dataFlatten.findIndex(function (d) {
        return d.id === id;
      });
      var activeIndex = dataFlatten.findIndex(function (d) {
        return d.id === selectedIds[0];
      });

      // 当前选区中只有1个元素 判断一下
      if (selectedIds.length === 1) {
        var ids = selectedIds;
        // 否则进行比较 index 大小
        if (activeIndex === currentIndex) {
          // 如果就是自己，那么就取消选择
          ids = [];
        } else if (activeIndex > currentIndex) {
          // 如果当前选区的 index 大于当前的 index，那么就从当前的 index 到 activeIndex + 1
          ids = dataFlatten.slice(currentIndex, activeIndex + 1).map(function (d) {
            return d.id;
          });
        } else {
          ids = dataFlatten.slice(activeIndex, currentIndex + 1).map(function (d) {
            return d.id;
          });
        }
        updateSelectedIds(ids);
      }
    },
    selectedNode: function selectedNode(id) {
      var _get5 = get(),
        selectedIds = _get5.selectedIds,
        updateSelectedIds = _get5.updateSelectedIds;
      if (selectedIds !== null && selectedIds !== void 0 && selectedIds.includes(id)) {
        updateSelectedIds([]);
      } else {
        updateSelectedIds([id]);
      }
    },
    deselectedAll: function deselectedAll() {
      var _get6 = get(),
        updateSelectedIds = _get6.updateSelectedIds;
      updateSelectedIds([]);
    },
    multiSelectNode: function multiSelectNode(id) {
      var _get7 = get(),
        selectedIds = _get7.selectedIds,
        updateSelectedIds = _get7.updateSelectedIds;
      if (selectedIds !== null && selectedIds !== void 0 && selectedIds.includes(id)) {
        updateSelectedIds(produce(selectedIds, function (draft) {
          draft.splice(draft.indexOf(id), 1);
        }));
      } else {
        updateSelectedIds([].concat(_toConsumableArray(selectedIds), [id]));
      }
    }
  };
};