/// <reference types="react" />
import type { StoreApi } from 'zustand';
import type { InternalSortableTreeStore } from './store';
declare const createStore: (showDevTools: boolean) => import("zustand/traditional").UseBoundStoreWithEqualityFn<Omit<StoreApi<InternalSortableTreeStore>, "setState"> & {
    setState<A extends string | {
        type: string;
    }>(partial: InternalSortableTreeStore | Partial<InternalSortableTreeStore> | ((state: InternalSortableTreeStore) => InternalSortableTreeStore | Partial<InternalSortableTreeStore>), replace?: boolean, action?: A): void;
}>;
declare const useStore: import("zustand-utils").UseContextStore<StoreApi<InternalSortableTreeStore>>, useStoreApi: () => {
    setState: (partial: InternalSortableTreeStore | Partial<InternalSortableTreeStore> | ((state: InternalSortableTreeStore) => InternalSortableTreeStore | Partial<InternalSortableTreeStore>), replace?: boolean) => void;
    getState: () => InternalSortableTreeStore;
    getInitialState: () => InternalSortableTreeStore;
    subscribe: (listener: (state: InternalSortableTreeStore, prevState: InternalSortableTreeStore) => void) => () => void;
    destroy: () => void;
}, Provider: ({ createStore, children }: {
    createStore: () => StoreApi<InternalSortableTreeStore>;
    children: import("react").ReactNode;
}) => import("react").FunctionComponentElement<import("react").ProviderProps<StoreApi<InternalSortableTreeStore>>>;
export type { ControlledState, OnTreeDataChange, State } from './initialState';
export * from './selectors';
export type { InternalSortableTreeStore } from './store';
export type { TreeNodeDispatchPayload } from './treeDataReducer';
export { Provider, createStore, useStore, useStoreApi };
