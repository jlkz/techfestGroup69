import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { arrayMove } from '@dnd-kit/sortable';
import { produce } from 'immer';
import merge from 'lodash.merge';
import { buildTree, flattenTree, removeNode, setProperty } from "../utils/treeNode";

// 新增节点

// 移动节点

// 移除节点

// 修改节点content内容

// 切换节点折叠状态

// 切换节点额外区域的显示状态

/**
 * 暴露给外部更新 TreeNode 的方法
 */

/**
 * 内部的更新方法
 */

export var treeDataReducer = function treeDataReducer(treeData, payload) {
  switch (payload.type) {
    case 'toggleCollapse':
      return setProperty(treeData, payload.id, 'collapsed', function (value) {
        return !value;
      });
    case 'toggleExtraVisible':
      return setProperty(treeData, payload.id, 'showExtra', function (value) {
        return !value;
      });
    case 'moveNode':
      return produce(treeData, function (draft) {
        var activeId = payload.activeId,
          projected = payload.projected,
          targetId = payload.targetId;
        var clonedItems = flattenTree(draft);
        var overIndex = clonedItems.findIndex(function (_ref) {
          var id = _ref.id;
          return id === targetId;
        });
        var activeIndex = clonedItems.findIndex(function (_ref2) {
          var id = _ref2.id;
          return id === activeId;
        });
        var activeTreeItem = clonedItems[activeIndex];
        clonedItems[activeIndex] = _objectSpread(_objectSpread({}, activeTreeItem), {}, {
          depth: projected.depth,
          parentId: projected.parentId
        });
        var sortedItems = arrayMove(clonedItems, activeIndex, overIndex);
        return buildTree(sortedItems);
      });
    case 'removeNode':
      return removeNode(treeData, payload.id);
    case 'addNode':
      return produce(treeData, function (draft) {
        if (!payload.index) {
          draft.push(_objectSpread({
            id: payload.node.id,
            children: []
          }, payload.node));
        }
      });
    case 'updateNodeContent':
      return setProperty(treeData, payload.id, 'content', function (preValue) {
        return merge(preValue, payload.content);
      });
  }
};