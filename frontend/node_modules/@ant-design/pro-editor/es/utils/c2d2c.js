import _typeof from "@babel/runtime/helpers/esm/typeof";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import isEmpty from 'lodash.isempty';
import isEqual from 'lodash.isequal';
import isNil from 'lodash.isnil';
import isObject from 'lodash.isobject';
import omitBy from 'lodash.omitby';
import uniq from 'lodash.uniq';
/**
 * 从schema 获取预设值
 * @param schema
 */
export var getDefaultValueFromSchema = function getDefaultValueFromSchema(schema) {
  if (schema.type === 'object') {
    if (!schema.properties) return;
    return Object.fromEntries(Object.entries(schema.properties).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];
      return [key, value.default];
    }));
  }
  if (schema.type === 'null') return null;
  return schema.default;
};

/**
 * 获取去重后的 props
 * @param props
 * @param schema
 */
export var getDiffPropsWithSchema = function getDiffPropsWithSchema(props, schema) {
  // 如果没有 schema，则使用原来的 props
  if (!schema) return props;
  var defaultProps = getDefaultValueFromSchema(schema);
  if (!defaultProps) return props;
  var filtered = Object.entries(props)
  // 过滤掉默认值
  .filter(function (entry) {
    var _entry = _slicedToArray(entry, 2),
      key = _entry[0],
      value = _entry[1];
    var defaultPropsValue = defaultProps[key];

    // 如果该属性在默认值中不存在
    if (typeof defaultProps[key] === 'undefined') return true;

    // 或者与默认值不相等
    return !isEqual(defaultPropsValue, value);
  });
  return Object.fromEntries(filtered);
};

/**
 * 根据组件名称、props 生成 props 和 schema生成symbolMaster名称
 */
export var getSymbolMasterNameFromProps = function getSymbolMasterNameFromProps(pkg, component, props, schema) {
  var validProps = getDiffPropsWithSchema(props, schema);

  // 用一个递归方法来层层结构生成对象名称
  var genName = function genName(propsObj, parentKey) {
    return Object.entries(propsObj).map(function (entry) {
      var _entry2 = _slicedToArray(entry, 2),
        key = _entry2[0],
        value = _entry2[1];

      // 针对数组，需要结构它的内部对象
      if (value instanceof Array) {
        return "".concat(key, "=[").concat(value.map(function (item) {
          return "{".concat(genName(item), "}");
        }).join(','), "]");
      }

      // 嵌套对象 递归解析
      if (isObject(value)) {
        return genName(value, key);
      }

      // undefined 和 null 直接过滤
      if (isNil(value)) {
        return '';
      }
      // 普通的其他值直接返回
      return "".concat(parentKey ? "".concat(parentKey, ".") : '').concat(key, "=").concat(value);
    }).filter(function (i) {
      return i;
    }).join(',');
  };
  var propsStr = genName(validProps);
  return "".concat(pkg.replace('/', '-'), "/").concat(component, "/").concat(propsStr);
};

/**
 * 获取组件库导入代码
 */
export var generateImportCode = function generateImportCode(pkg, components) {
  return "import { ".concat(uniq(components).join(', '), " } from '").concat(pkg, "';");
};

/**
 * 将 prop 转换成字符串
 */
export var createPropString = function createPropString(key, value) {
  switch (_typeof(value)) {
    case 'undefined':
      return '';
    case 'object':
      // 数组
      if (value instanceof Array) {
        return "".concat(key, "={").concat(JSON.stringify(value), "}");
      }

      // eslint-disable-next-line no-case-declarations
      var clearValue = omitBy(value, isNil);
      // 如果 object 里不存在任何值，返回空
      if (Object.values(clearValue).length === 0) return '';

      // eslint-disable-next-line no-case-declarations
      var genObjStr = function genObjStr() {
        // 如果包含 $$__type 属性，说明是 ReactNode 或 icon
        if (value.$$__type) {
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          return genChildrenJSXCode(value);
        }
        return JSON.stringify(clearValue, null);
      };
      return "".concat(key, "={").concat(genObjStr(), "}");
    case 'boolean':
      if (value) return "".concat(key);
      return "".concat(key, "={").concat(value, "}");
    case 'number':
      return "".concat(key, "={").concat(value, "}");
    case 'string':
      if (isEmpty(value)) return '';
      return "".concat(key, "=\"").concat(value, "\"");
    case 'function':
      return "".concat(key, "={").concat(value.toString(), "}");
    case 'symbol':
      return "".concat(key, "={Symbol.for('").concat(value.description, "')}");
  }
};

/**
 * 生成 React JSX 代码
 * @param component
 * @param props
 * @param PropStringFn
 */
export var generateJSXCode = function generateJSXCode(component, props) {
  var PropStringFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createPropString;
  if (!props) {
    return "<".concat(component, " />");
  }
  var inline = !props.children;
  var propsStr = Object.entries(props)
  // 针对 children 有值的情况下，在 props 上过滤掉 children
  .filter(function (v) {
    return inline ? v : v[0] !== 'children';
  }).map(function (entry) {
    return PropStringFn(entry[0], entry[1]);
  })
  // 过滤空的对象
  .filter(function (v) {
    return v;
  }).join(' ');
  if (inline) return "<".concat(component, " ").concat(propsStr, "/>");

  // eslint-disable-next-line @typescript-eslint/no-use-before-define
  return "<".concat(component, " ").concat(propsStr, ">").concat(genChildrenJSXCode(props.children), "</").concat(component, ">");
};

/**
 * 生成子 JSX 代码
 * @param children
 */
var genChildrenJSXCode = function genChildrenJSXCode(children) {
  // children 为字符串的场景
  if (typeof children === 'string') {
    return children;
  }
  var renderChildNode = function renderChildNode(child) {
    var $$__type = child.$$__type,
      $$__body = child.$$__body;
    switch ($$__type) {
      // children 为子组件的场景
      case 'element':
        return generateJSXCode($$__body.componentName, $$__body.props);
      // TODO： children 为 Icon 的场景
    }
  };
  if (children instanceof Array) {
    return children.map(renderChildNode).join('\n');
  }
  return renderChildNode(children);
};