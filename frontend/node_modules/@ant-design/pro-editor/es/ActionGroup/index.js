import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { DashOutlined, DeleteOutlined, FullscreenOutlined, RedoOutlined, UndoOutlined } from '@ant-design/icons';
import { ActionIcon, ConfigProvider } from "./..";
import { Divider, Dropdown } from 'antd';
import { useStyle } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var ActionGroup = function ActionGroup(props) {
  var _props$type = props.type,
    type = _props$type === void 0 ? 'block' : _props$type,
    _props$direction = props.direction,
    direction = _props$direction === void 0 ? 'row' : _props$direction,
    size = props.size,
    className = props.className,
    style = props.style,
    render = props.render,
    dropdownMenu = props.dropdownMenu,
    items = props.items,
    _props$onClick = props.onClick,
    _onClick = _props$onClick === void 0 ? function () {} : _props$onClick,
    onFullScreenClick = props.onFullScreenClick,
    onUndoClick = props.onUndoClick,
    onRedoClick = props.onRedoClick,
    onDeleteClick = props.onDeleteClick,
    dropdownProps = props.dropdownProps,
    dropdownMenuTrigger = props.dropdownMenuTrigger;
  var _useStyle = useStyle({
      direction: direction,
      type: type
    }),
    styles = _useStyle.styles,
    cx = _useStyle.cx;
  var DefalutItemConfig = [{
    icon: /*#__PURE__*/_jsx(FullscreenOutlined, {}),
    onClick: onFullScreenClick
  }, {
    icon: /*#__PURE__*/_jsx(UndoOutlined, {}),
    onClick: onUndoClick
  }, {
    icon: /*#__PURE__*/_jsx(RedoOutlined, {}),
    onClick: onRedoClick
  }, {
    icon: /*#__PURE__*/_jsx(DeleteOutlined, {}),
    onClick: onDeleteClick
  }];
  var config = items || DefalutItemConfig;
  var ActionDomList = function ActionDomList() {
    var defalutDom = /*#__PURE__*/_jsx(_Fragment, {
      children: config.map(function (item, index) {
        if (item !== null && item !== void 0 && item.type) return /*#__PURE__*/_jsx(Divider, {
          type: direction === 'row' ? 'vertical' : 'horizontal',
          style: {
            margin: "".concat(direction === 'row' ? '0 4px' : '4px 0')
          }
        }, "action-divider-".concat(index));
        return /*#__PURE__*/_jsx(ActionIcon, _objectSpread(_objectSpread({
          title: item === null || item === void 0 ? void 0 : item.label,
          size: size
        }, item), {}, {
          onClick: function onClick() {
            if (item !== null && item !== void 0 && item.onClick) {
              item === null || item === void 0 || item.onClick();
            }
            _onClick(item === null || item === void 0 ? void 0 : item.key);
          }
        }), "action-btn-".concat(index));
      })
    });
    if (render) {
      return render(config, dropdownMenu);
    }
    return defalutDom;
  };
  return /*#__PURE__*/_jsxs("div", {
    className: cx(styles.content, className),
    style: style,
    children: [/*#__PURE__*/_jsx(ActionDomList, {}), dropdownMenu && /*#__PURE__*/_jsx(Dropdown, _objectSpread(_objectSpread({
      trigger: ['click']
    }, dropdownProps), {}, {
      menu: {
        items: dropdownMenu.map(function (item) {
          if (item !== null && item !== void 0 && item.type) return item;
          return _objectSpread(_objectSpread({}, item), {}, {
            icon: item.icon
          });
        })
      },
      children: dropdownMenuTrigger ? dropdownMenuTrigger : /*#__PURE__*/_jsx(ActionIcon, {
        icon: /*#__PURE__*/_jsx(DashOutlined, {}),
        size: size
      }, "more")
    }))]
  });
};
var WrapperActionGroup = function WrapperActionGroup(props) {
  return /*#__PURE__*/_jsx(ConfigProvider, {
    children: /*#__PURE__*/_jsx(ActionGroup, _objectSpread({}, props))
  });
};
export { WrapperActionGroup as ActionGroup };