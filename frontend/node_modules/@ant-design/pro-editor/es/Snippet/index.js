import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["symbol", "language", "children", "copyable", "type", "spotlight", "className"];
import HighLighter from "../Highlight/components/HighLighter";
import CopyButton from "../components/CopyButton";
import Spotlight from "../components/Spotlight";
import { useThemeMode } from 'antd-style';
import { memo } from 'react';
import { ConfigProvider } from '..';
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var Snippet = /*#__PURE__*/memo(function (props) {
  var _props$symbol = props.symbol,
    symbol = _props$symbol === void 0 ? '$' : _props$symbol,
    _props$language = props.language,
    language = _props$language === void 0 ? 'tsx' : _props$language,
    children = props.children,
    _props$copyable = props.copyable,
    copyable = _props$copyable === void 0 ? true : _props$copyable,
    _props$type = props.type,
    type = _props$type === void 0 ? 'ghost' : _props$type,
    spotlight = props.spotlight,
    className = props.className,
    rest = _objectWithoutProperties(props, _excluded);
  var _useThemeMode = useThemeMode(),
    isDarkMode = _useThemeMode.isDarkMode;
  var _useStyles = useStyles({
      type: type
    }),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  return /*#__PURE__*/_jsx(ConfigProvider, {
    children: /*#__PURE__*/_jsxs("div", _objectSpread(_objectSpread({
      className: cx(styles.container, className)
    }, rest), {}, {
      children: [spotlight && /*#__PURE__*/_jsx(Spotlight, {}), /*#__PURE__*/_jsx(HighLighter, {
        language: language,
        theme: isDarkMode ? 'dark' : 'light',
        prefixCls: "snippet",
        children: symbol ? [symbol, children].join(' ') : children
      }), copyable && /*#__PURE__*/_jsx(CopyButton, {
        content: children
      })]
    }))
  });
});
export { Snippet };