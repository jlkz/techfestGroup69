import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
var _templateObject;
import { Input, useSortableList } from "../..";
import { createStyles } from 'antd-style';
import { memo, useEffect, useRef } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
var useStyle = createStyles(function (_ref) {
  var css = _ref.css,
    cx = _ref.cx,
    prefixCls = _ref.prefixCls,
    token = _ref.token;
  var prefix = "".concat(prefixCls, "-").concat(token.editorPrefix, "-content");
  return {
    input: cx("".concat(prefix, "-tem"), css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        padding-left: 13px;\n      "]))))
  };
});
var ControlInput = /*#__PURE__*/memo(function (_ref2) {
  var dataIndex = _ref2.dataIndex,
    placeholder = _ref2.placeholder,
    value = _ref2.value,
    index = _ref2.index,
    style = _ref2.style,
    dragging = _ref2.dragging,
    creatorButtonProps = _ref2.creatorButtonProps;
  var instance = useSortableList();
  var inputRef = useRef(null);
  var _useStyle = useStyle(),
    styles = _useStyle.styles;
  useEffect(function () {
    if (dragging) {
      inputRef.current.blur();
    }
  }, [dragging]);
  var customListId = function customListId(index) {
    var id = instance.getIdByIndex(index);
    return "column-list-".concat(index, "-").concat(id);
  };
  var handleNextFocus = function handleNextFocus() {
    var value = instance.getValue() || [];
    // 如果是最后一个节点，按下回车后，会自动添加一个新的节点
    if (index + 1 === value.length && creatorButtonProps !== false) {
      var record = creatorButtonProps.record;
      instance.addItem(record(value.length));
    }
    setTimeout(function () {
      var nextNodeEl = document.getElementById(customListId(index + 1));
      nextNodeEl === null || nextNodeEl === void 0 || nextNodeEl.focus();
    }, 0);
  };
  return /*#__PURE__*/_jsx(Input, {
    size: 'small',
    ref: inputRef,
    value: value,
    style: style,
    id: customListId(index),
    placeholder: placeholder || '请输入',
    className: styles.input,
    onPressEnter: function onPressEnter() {
      handleNextFocus();
    },
    onChange: function onChange(value) {
      instance.updateItem(_defineProperty({}, dataIndex, value), index);
    }
  });
});
export default ControlInput;