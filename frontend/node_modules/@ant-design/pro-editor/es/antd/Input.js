import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
var _excluded = ["className", "defaultValue", "onChange", "value", "onCompositionStart", "onCompositionEnd", "onBlur", "onFocus", "onValueChanging"];
var _templateObject;
import { Input as _Input } from 'antd';
import { forwardRef, useEffect, useRef, useState } from 'react';
import { ConfigProvider } from "../ConfigProvider";
import { createStyles } from "../theme";
import { jsx as _jsx } from "react/jsx-runtime";
var useStyles = createStyles(function (_ref) {
  var stylish = _ref.stylish,
    css = _ref.css;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    ", "\n  "])), stylish.controlContainer);
});
export var Input = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var className = _ref2.className,
    defaultValue = _ref2.defaultValue,
    onChange = _ref2.onChange,
    value = _ref2.value,
    _onCompositionStart = _ref2.onCompositionStart,
    _onCompositionEnd = _ref2.onCompositionEnd,
    _onBlur = _ref2.onBlur,
    _onFocus = _ref2.onFocus,
    onValueChanging = _ref2.onValueChanging,
    props = _objectWithoutProperties(_ref2, _excluded);
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var compositionRef = useRef(false);
  var _useState = useState(value !== null && value !== void 0 ? value : defaultValue),
    _useState2 = _slicedToArray(_useState, 2),
    input = _useState2[0],
    setInput = _useState2[1];
  var valueRef = useRef(defaultValue || value);
  useEffect(function () {
    if (typeof value !== 'undefined') {
      setInput(value);
    }
  }, [value]);
  var triggerUpdate = function triggerUpdate() {
    if (input !== valueRef.current) {
      onChange === null || onChange === void 0 || onChange(input);
      valueRef.current = input;
    }
  };
  return /*#__PURE__*/_jsx(ConfigProvider, {
    children: /*#__PURE__*/_jsx(_Input, _objectSpread(_objectSpread({}, props), {}, {
      ref: ref,
      className: cx(styles, className),
      value: input,
      onChange: function onChange(e) {
        setInput(e.target.value);
        onValueChanging === null || onValueChanging === void 0 || onValueChanging(e.target.value);
      },
      onFocus: function onFocus(event) {
        _onFocus === null || _onFocus === void 0 || _onFocus(event);
      },
      onBlur: function onBlur(event) {
        triggerUpdate();
        _onBlur === null || _onBlur === void 0 || _onBlur(event);
      },
      onPressEnter: function onPressEnter(e) {
        var _props$onPressEnter;
        if (compositionRef.current) return;
        triggerUpdate();
        (_props$onPressEnter = props.onPressEnter) === null || _props$onPressEnter === void 0 || _props$onPressEnter.call(props, e);
      },
      onCompositionStart: function onCompositionStart(e) {
        compositionRef.current = true;
        _onCompositionStart === null || _onCompositionStart === void 0 || _onCompositionStart(e);
      },
      onCompositionEnd: function onCompositionEnd(e) {
        compositionRef.current = false;
        _onCompositionEnd === null || _onCompositionEnd === void 0 || _onCompositionEnd(e);
      }
    }))
  });
});