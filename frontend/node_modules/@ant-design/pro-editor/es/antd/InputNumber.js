import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
var _excluded = ["className", "value", "onValueChanging", "onChange", "defaultValue", "onFocus", "onBlur", "onPressEnter"];
var _templateObject;
import { InputNumber as _InputNumber } from 'antd';
import { useEffect, useRef, useState } from 'react';
import { ConfigProvider } from "../ConfigProvider";
import { createStyles } from "../theme";
import { jsx as _jsx } from "react/jsx-runtime";
var useStyles = createStyles(function (_ref) {
  var stylish = _ref.stylish,
    css = _ref.css,
    token = _ref.token,
    prefixCls = _ref.prefixCls;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      ", "\n\n      .", "-input-number-group-addon {\n        padding: 0 4px;\n        color: ", ";\n        background: ", ";\n        border-color: transparent;\n      }\n    "])), stylish.controlContainer, prefixCls, token.colorTextTertiary, token.colorFillQuaternary);
});
export var InputNumber = function InputNumber(_ref2) {
  var className = _ref2.className,
    value = _ref2.value,
    onValueChanging = _ref2.onValueChanging,
    onChange = _ref2.onChange,
    defaultValue = _ref2.defaultValue,
    _onFocus = _ref2.onFocus,
    _onBlur = _ref2.onBlur,
    _onPressEnter = _ref2.onPressEnter,
    rest = _objectWithoutProperties(_ref2, _excluded);
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var _useState = useState(defaultValue || value),
    _useState2 = _slicedToArray(_useState, 2),
    input = _useState2[0],
    setInput = _useState2[1];
  var valueRef = useRef(defaultValue);
  useEffect(function () {
    if (typeof value !== 'undefined') {
      setInput(value);
    }
  }, [value]);
  var triggerUpdate = function triggerUpdate() {
    if (input !== valueRef.current) {
      onChange === null || onChange === void 0 || onChange(input);
      valueRef.current = input;
    }
  };
  return /*#__PURE__*/_jsx(ConfigProvider, {
    children: /*#__PURE__*/_jsx(_InputNumber, _objectSpread(_objectSpread({
      size: 'middle'
    }, rest), {}, {
      value: input,
      onFocus: function onFocus(event) {
        _onFocus === null || _onFocus === void 0 || _onFocus(event);
      },
      onBlur: function onBlur(event) {
        triggerUpdate();
        _onBlur === null || _onBlur === void 0 || _onBlur(event);
      },
      onChange: function onChange(v) {
        setInput(v);
        onValueChanging === null || onValueChanging === void 0 || onValueChanging(v);
      },
      onPressEnter: function onPressEnter(e) {
        triggerUpdate();
        _onPressEnter === null || _onPressEnter === void 0 || _onPressEnter(e);
      },
      className: cx(styles, className)
    }))
  });
};