import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
/*eslint no-invalid-this: "error"*/

import { getDefaultValueFromSchema } from "../utils";
import { EmitterEnv } from "./types";
import { createAssetStore } from "./store";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
export var ComponentAsset = /*#__PURE__*/function () {
  function ComponentAsset(params) {
    var _this = this,
      _params$storeOptions,
      _params$storeOptions2;
    _classCallCheck(this, ComponentAsset);
    /**
     * 组件 ID
     */
    _defineProperty(this, "id", void 0);
    /**
     * 组件本身
     */
    _defineProperty(this, "Component", void 0);
    /**
     * 组件配置面板
     */
    _defineProperty(this, "ConfigPanel", void 0);
    /**
     * 组件画布启动器
     */
    _defineProperty(this, "CanvasStarter", void 0);
    /**
     * 组件设计控制器
     */
    _defineProperty(this, "DesignController", void 0);
    /**
     * 组件开发控制器
     */
    _defineProperty(this, "DevelopController", void 0);
    _defineProperty(this, "AssetProvider", void 0);
    _defineProperty(this, "ErrorBoundary", function (_ref) {
      var children = _ref.children;
      return /*#__PURE__*/_jsx(_Fragment, {
        children: children
      });
    });
    _defineProperty(this, "rules", void 0);
    _defineProperty(this, "models", void 0);
    _defineProperty(this, "defaultConfig", void 0);
    _defineProperty(this, "componentStore", void 0);
    _defineProperty(this, "componentStoreApi", void 0);
    _defineProperty(this, "configSelector", void 0);
    _defineProperty(this, "setConfig", void 0);
    _defineProperty(this, "codeEmitter", void 0);
    _defineProperty(this, "isStarterMode", function () {
      return false;
    });
    /**
     * 生成 props
     * @param config
     * @param type
     */
    _defineProperty(this, "generateProps", function (config) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmitterEnv.Runtime;
      var props = {};
      // 针对 config 中每一个配置项，用 emitter 进行数据转换
      Object.keys(config).forEach(function (key) {
        // eslint-disable-next-line no-invalid-this
        _this.models.forEach(function (model) {
          // 针对 key 能匹配上的情况，做转换
          if (model.key === key) {
            var p = model.emitter(config, type);
            Object.assign(props, p);
          }
        });
      });
      return props;
    });
    this.id = params.id;

    // 传入数据模型
    this.models = params.models;

    // 传入外部的默认值
    if (params.defaultConfig) {
      this.defaultConfig = params.defaultConfig;
    }
    var _createAssetStore = createAssetStore(params.createStore, params.storeOptions),
      createStore = _createAssetStore.createStore,
      Provider = _createAssetStore.Provider,
      useStoreApi = _createAssetStore.useStoreApi;

    // 初始化 store
    this.componentStore = createStore();
    this.componentStoreApi = useStoreApi;
    this.AssetProvider = Provider;
    this.configSelector = ((_params$storeOptions = params.storeOptions) === null || _params$storeOptions === void 0 ? void 0 : _params$storeOptions.getConfig) || function (s) {
      return JSON.parse(JSON.stringify(s));
    };
    this.setConfig = ((_params$storeOptions2 = params.storeOptions) === null || _params$storeOptions2 === void 0 ? void 0 : _params$storeOptions2.setConfig) || function (config, set) {
      return set(config);
    };

    // 交互规则
    this.rules = params.ui.rules;

    // 传入面板模块和属性面板
    this.Component = params.ui.Component;
    this.ConfigPanel = params.ui.ConfigPanel;
    this.CanvasStarter = params.ui.CanvasStarter;
    this.DesignController = params.ui.DesignController;
    this.DevelopController = params.ui.DevelopController;
    if (params.ui.ErrorBoundary) {
      this.ErrorBoundary = params.ui.ErrorBoundary;
    }

    // 空状态判断器
    if (params.ui.isStarterMode) {
      this.isStarterMode = params.ui.isStarterMode;
    }

    // 初始化代码生成器
    this.codeEmitter = params.codeEmitter;
  }
  _createClass(ComponentAsset, [{
    key: "generateCode",
    value:
    /**
     * 代码生成器
     * @param config
     */
    function generateCode(config) {
      if (!this.codeEmitter) {
        throw Error('暂未实现 generateCode 方法，请在初始化时传入 codeEmitter');
      }
      if (!config) return '暂无生成代码';
      var props = this.generateProps(config, EmitterEnv.Code);
      return this.codeEmitter(config, props);
    }

    /**
     * 获取默认配置
     * @param mode
     */
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig(mode) {
      var config = {};
      this.models.forEach(function (model) {
        if (model.schema) {
          var schema = model.schema(mode);
          var value = getDefaultValueFromSchema(schema);
          Object.assign(config, _defineProperty({}, model.key, value));
        }
      });
      return _objectSpread(_objectSpread({}, config), this.defaultConfig);
    }
  }, {
    key: "registerConfigPanel",
    value: function registerConfigPanel(panel) {
      this.ConfigPanel = panel;
    }
  }]);
  return ComponentAsset;
}();