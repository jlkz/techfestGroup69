import { ReactNode } from 'react';
import { StateCreator, StoreApi } from 'zustand';
import { UseContextStore } from 'zustand-utils';
import { DevtoolsOptions } from 'zustand/middleware';
import type { ProBuilderInstance } from "../../ProBuilder";
export interface AssetStoreOptions<T = any> {
    devtools?: boolean | DevtoolsOptions;
    getConfig?: (state: any) => T;
    setConfig?: (config: T, set: any) => void;
}
export type CreateAssetStore<T> = StateCreator<T & ProBuilderInstance, [
    ['zustand/devtools', never]
], [
], T>;
declare const useStore: UseContextStore<StoreApi<any>>, useStoreApi: () => {
    setState: (partial: any, replace?: boolean) => void;
    getState: () => any;
    getInitialState: () => any;
    subscribe: (listener: (state: any, prevState: any) => void) => () => void;
    destroy: () => void;
};
export declare const createAssetStore: <T>(createStore: StateCreator<T>, options?: AssetStoreOptions<T>) => {
    Provider: ({ createStore, children }: {
        createStore: () => StoreApi<any>;
        children: ReactNode;
    }) => import("react").FunctionComponentElement<import("react").ProviderProps<StoreApi<any>>>;
    createStore: () => import("zustand/traditional").UseBoundStoreWithEqualityFn<Omit<StoreApi<T>, "setState"> & {
        setState<A extends string | {
            type: string;
        }>(partial: T | Partial<T> | ((state: T) => T | Partial<T>), replace?: boolean, action?: A): void;
    }>;
    useStoreApi: () => {
        setState: (partial: any, replace?: boolean) => void;
        getState: () => any;
        getInitialState: () => any;
        subscribe: (listener: (state: any, prevState: any) => void) => () => void;
        destroy: () => void;
    };
};
export type WithoutCallSignature<T> = {
    [K in keyof T]: T[K];
};
export declare const createUseAssetStore: <T>() => {
    useStore: UseContextStore<StoreApi<T & ProBuilderInstance<any, any>>>;
    useStoreApi: () => WithoutCallSignature<StoreApi<T & ProBuilderInstance<any, any>>>;
    AssetProvider: ({ createStore, children, }: {
        createStore: () => StoreApi<T>;
        children: any;
    }) => ReactNode;
};
export {};
