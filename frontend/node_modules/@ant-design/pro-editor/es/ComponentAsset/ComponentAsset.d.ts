import { FC, ReactNode } from 'react';
import { StoreApi } from 'zustand';
import type { UseBoundStore } from 'zustand/react';
import type { EditorMode } from '../ProBuilder';
import type { AssetModels, CanvasRule, CodeEmitter, ComponentAssetParams } from './types';
import { DataProvider, EmitterEnv } from './types';
import { WithoutCallSignature } from './store';
export declare class ComponentAsset<Config = any, Props = any> {
    /**
     * 组件 ID
     */
    id: string;
    /**
     * 组件本身
     */
    Component: FC;
    /**
     * 组件配置面板
     */
    ConfigPanel: FC;
    /**
     * 组件画布启动器
     */
    CanvasStarter: FC;
    /**
     * 组件设计控制器
     */
    DesignController: FC;
    /**
     * 组件开发控制器
     */
    DevelopController: FC;
    AssetProvider: DataProvider;
    ErrorBoundary: FC<{
        children: ReactNode;
    }>;
    rules: CanvasRule[];
    models: AssetModels<Config>;
    defaultConfig: Partial<Config>;
    componentStore: UseBoundStore<any>;
    componentStoreApi: () => WithoutCallSignature<StoreApi<any>>;
    configSelector: (s: Config) => Partial<Config>;
    setConfig: (config: Config, set: any) => void;
    codeEmitter: CodeEmitter<Config, Props>;
    isStarterMode: (store: any) => boolean;
    constructor(params: ComponentAssetParams<Config>);
    /**
     * 生成 props
     * @param config
     * @param type
     */
    generateProps: (config: Partial<Config>, type?: EmitterEnv) => Partial<Props>;
    /**
     * 代码生成器
     * @param config
     */
    generateCode(config: Config): string;
    /**
     * 获取默认配置
     * @param mode
     */
    getDefaultConfig(mode?: EditorMode | string): Config;
    registerConfigPanel(panel: FC): void;
}
